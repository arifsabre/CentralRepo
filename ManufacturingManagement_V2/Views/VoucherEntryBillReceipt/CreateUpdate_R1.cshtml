@model ManufacturingManagement_V2.Models.VoucherMdl
@using Newtonsoft.Json

@{
        ViewBag.Title = "CreateUpdate";
        Layout = "~/views/shared/_LayoutCommon.cshtml";
}
 
    <h2>Voucher Entry -Payment Receipt</h2>
    <div class="container" style="max-width:640px">
        <div class="form-group">
            <div id="sinfo" style="display:none;font-size:8pt;color:black;font-weight:bold;">
                    <label id="lblSaleInfo"></label >
            </div>
            <table>
                @Html.Hidden("hfPayingAuthId", null, new { @id = "hfPayingAuthId" })
                @Html.Hidden("hfBillAcCode", null, new { @id = "hfBillAcCode" })
                @Html.Hidden("hfBillNo", null, new { @id = "hfBillNo" })
                @Html.Hidden("hfSumDrAmt", null, new { @id = "hfSumDrAmt" })
                @Html.Hidden("hfAcCode", null, new { @id = "hfAcCode" })
                <tr>
                    <td>Voucher/NEFT Date</td>
                    <td><input type="text" id="txtVDate"/>   @*input type="date"*@
                    <span class="error">Invalid VDate!</span></td> 
                    <td>@Html.DisplayNameFor(model => model.VNo)</td>
                    <td><input type="text" id="txtVNo" readonly="true" />
                    <span class="error">Invalid VNo!</span></td>   
                </tr>
                <tr>
                    <td colspan="4"><h3>Bill Detail</h3></td>
                </tr>
                <tr>
                    <td>Paying Authority</td>
                    <td><input type="text" id="txtPayingAuthName" 
                        placeholder="start typing, then select" />
                    <span class="error">Invalid Paying Authority!</span></td>   
                    <td>Bill No</td>
                    <td><input type="text" id="txtBillNo" 
                        placeholder="type 'bill-', then select"/>  
                    <span class="error">Invalid Bill No!</span></td> 
                </tr>
                <tr>
                    <td>Adjustment Amount</td>
                    <td colspan="2"><input type="text" id="txtAdjAmount" />
                    <span class="error">Invalid Adjustment Amount!</span></td>  
                </tr>
                <tr>
                    <td colspan="4"><h3>Receipt Entry</h3></td>
                </tr>
                <tr>
                    <td>Receiving Head</td>
                    <td>@*<input type="text" id="txtAcDesc" placeholder="start typing, then select" />*@
                        @Html.DropDownList("ddlRecHead", ViewBag.RecHeadList as SelectList, "--Select--",
                        new { @onchange="setFocus()"})
                    <span class="error">Account not selected!</span></td>
                    <td>Receipt Amount</td>
                    <td>
                        <input type="text" id="txtDrAmount" />
                        <span class="error">Invalid Receipt Amount!</span>
                    </td>
                </tr>
                <tr>
                    <td>Remarks/<br/>MemoNo</td>
                    <td colspan="2">
                        <input type="text" id="txtNarration" />
                        <span class="error">Invalid remarks!</span>
                    </td>
                    <td>
                        <input style="height:35px;" type="button" id="add" value="Add Receipt" />
                    </td>
                </tr>
                </table>

                <table>
                    <tr><td><h3>Receipt Detail</h3></td></tr>
                    <tr><td><div id="orderItems" class="tablecontainer"></div></td></tr>
                    <tr><td><div id="sdrcr" style="font-weight:bold;color:black;"></div></td></tr>
                </table>
            
        </div>
        
        <br/>
        <div style="padding:10px 0px; text-align:left;">
            <input id="submit" type="button" value='@ViewData["AddEdit"]' style="padding:10px 20px" />
            @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-default" }) 
            @*@Html.ActionLink("Preview", "OrderReportDirect", "OrderReport",
            null, new { id = "mylink", @target = "_new;"})*@
        </div>
    </div>
 
<link rel="stylesheet" href="//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css">
<link rel="stylesheet" href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>

@section Scripts{
    <script src="//code.jquery.com/ui/1.11.4/jquery-ui.js"></script>
    <script type="text/javascript">
        $(function () {
            //$("input[type=text]").first().focus();
            document.getElementById("txtVDate").value = '@Model.VDateStr';
            $('#mylink').attr('href', '#');
            document.getElementById("sdrcr").innerHTML = "Total Receipt Amount: 0";
            document.getElementById("txtDrAmount").value = '0';
            document.getElementById("txtPayingAuthName").focus();
            //getBillDetailBySaleRecId('@ViewBag.sid'); not working properly
        });
    </script>

    @*<script type="text/javascript">
        $("#txtAcDesc").autocomplete({
            source: function (request, response) {
                var customer = new Array();
                $.ajax({
                    async: false,
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("AutoCompleteAccountWithGroup", "HelpUtility"))",
                    data: { "term": request.term, "rectype": 'a' },
                    success: function (data) {
                        for (var i = 0; i < data.length ; i++) {
                            customer[i] = { label: data[i].Value, Id: data[i].Key };
                        }
                    }
                });
                response(customer);
            }, minLength: 2,
            select: function (event, ui) {
                document.getElementById('hfAcCode').value = ui.item.Id;
                document.getElementById("txtDrAmount").focus();
                document.getElementById("txtDrAmount").select(0);
            }
        });
</script>*@

    <script type="text/javascript">
        $("#txtPayingAuthName").autocomplete({
            source: function (request, response) {
                var customer = new Array();
                $.ajax({
                    async: false,
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("AutoCompletePayingAuthority", "HelpUtility"))",
                    data: { "term": request.term },
                    success: function (data) {
                        for (var i = 0; i < data.length ; i++) {
                            customer[i] = { label: data[i].Value, Id: data[i].Key };
                        }
                    }
                });
                response(customer);
            }, minLength: 2,
            select: function (event, ui) {
                document.getElementById('hfPayingAuthId').value = ui.item.Id;
                document.getElementById('txtBillNo').value = '';
                document.getElementById('hfBillNo').value = '';
                document.getElementById('txtAdjAmount').value = '0';
                document.getElementById('txtBillNo').focus();
            }
        });
</script>

    <script type="text/javascript">
        $("#txtBillNo").autocomplete({
            source: function (request, response) {
                var pauthid = document.getElementById('hfPayingAuthId').value;
                if (document.getElementById('txtPayingAuthName').value.length == 0)
                {
                    pauthid = 0;
                }
                var customer = new Array();
                $.ajax({
                    async: false,
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("AutoCompleteSaleBillNumbers", "HelpUtility"))",
                    data: { "term": request.term, "payingauthid": pauthid },
                    success: function (data) {
                        for (var i = 0; i < data.length ; i++) {
                            customer[i] = { label: data[i].Value, Id: data[i].Key };
                        }
                    }
                });
                response(customer);
            }, minLength: 2,
            select: function (event, ui) {
                getBillDetailByBillNo(ui.item.Id);
            }
        });
</script>

    <script>
        function getBillDetailByBillNo(billno) {
            //old code var arr = billid.split('#');
            //alert(arr[0]);//billno
            //alert(arr[1]);//accode
            //alert(arr[2]);//balance
            //cl:old code---------------------------
            $.ajax({
                cache: false,
                async: false,
                type: "POST",
                url: "@(Url.Action("getBillInformationByBillNo", "HelpUtility"))",
                    //data: { "billno": arr[0] },old code
                    data: { "billno": billno },
                    success: function (data) {
                        document.getElementById('txtPayingAuthName').value = data.payingauthname;
                        document.getElementById('hfPayingAuthId').value = data.payingauthid;
                        document.getElementById('hfBillNo').value = data.billno;
                        document.getElementById('hfBillAcCode').value = data.accode;
                        document.getElementById('txtAdjAmount').value = data.balance;
                        document.getElementById('sinfo').style.display = "block";
                        $('#lblSaleInfo').text('Consignee: ' + data.consignee + ', RC Info: ' + data.rcinfo);
                        action = data.Action;
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve states.');
                    }
            });
            document.getElementById('txtAdjAmount').focus();
            //document.getElementById('txtAdjAmount').select();
        }
</script>

    <script>
        function getBillDetailBySaleRecId(salerecid) {
            //not working properly
            $.ajax({
                cache: false,
                async: false,
                type: "POST",
                url: "@(Url.Action("getBillInformationBySaleRecId", "HelpUtility"))",
                data: { "salerecid": salerecid },
                success: function (data) {
                    document.getElementById('txtPayingAuthName').value = data.payingauthname;
                    document.getElementById('hfPayingAuthId').value = data.payingauthid;
                    document.getElementById('hfBillNo').value = data.billno;
                    document.getElementById('txtBillNo').value = data.billno;
                    document.getElementById('hfBillAcCode').value = data.accode;
                    document.getElementById('txtAdjAmount').value = data.balance;
                    document.getElementById('sinfo').style.display = "block";
                    //$('#lblSaleInfo').text('Consignee: ' + data.consignee + ', RC Info: ' + data.rcinfo + ', Pauth: ' + data.payingauthname + ', PauthId: ' + data.payingauthid);
                    action = data.Action;
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to retrieve states.');
                }
            });
            document.getElementById('txtAdjAmount').focus();
            document.getElementById('txtAdjAmount').select();
            alert(document.getElementById('hfPayingAuthId').value);
        }
</script>

    <script>
        //Date Picker
        $(function () {
            $('#txtVDate').datepicker({
                dateFormat: 'dd/mm/yy'
            });
        });

        function setAmount() {
            var _DrAmt = 0;
            $("#myTable tr").each(function (index, item) {
                if (index > -1) {
                    var tds = $(this).find("td");
                    //var textboxValue = $(tds).eq(4).find("input").val();//setUser
                    //_CrAmt = parseFloat(_CrAmt) + parseFloat($(tds).eq(3).find("input").val());
                    _DrAmt = parseFloat(_DrAmt) + parseFloat($(this).closest('tr').find('td:eq(1)').text());
                }
            });
            //$('#lblCrAmount').text(_CrAmt);
            document.getElementById('hfSumDrAmt').value = _DrAmt;
            document.getElementById("sdrcr").innerHTML = "Total Receipt Amount: " + $('#hfSumDrAmt').val().trim();
        }
        //

        function setFocus() {
            setAmount();
            var DrAmt = parseFloat($('#hfSumDrAmt').val().trim());
            var diffamt = parseFloat($('#txtAdjAmount').val()) - parseFloat(DrAmt);
            document.getElementById('txtDrAmount').value = diffamt;
            document.getElementById("txtDrAmount").focus();
            document.getElementById("txtDrAmount").select();
        }
        //

        $(document).ready(function () {
            var orderItems = [];

            //addReceipt
            $('#add').click(function () {

                //if (!($('#hfAcCode').val().trim() != '' && !isNaN($('#hfAcCode').val().trim()))) {
                //    alert('Receiving head not selected!');
                //    document.getElementById("txtAcDesc").focus();
                //    return;
                //}

                var liRecHead = document.getElementById("ddlRecHead");
                var recHeadIndex = liRecHead.selectedIndex;
                if (recHeadIndex == 0) {
                    alert('Receiving head not selected!');
                    return;
                }
                var accode = liRecHead.options[recHeadIndex].value;
                var acdesc = liRecHead.options[recHeadIndex].innerHTML;

                if (!($('#txtDrAmount').val().trim() != '' && !isNaN($('#txtDrAmount').val().trim()))) {
                    alert('Invalid receipt amount!');
                    document.getElementById("txtDrAmount").focus();
                    return;
                }

                if (parseFloat($('#txtDrAmount').val().trim()) == 0) {
                    alert("Receipt amount must not be 0!");
                    document.getElementById("txtDrAmount").focus();
                    return;
                }

                if ($('#txtNarration').val().trim() == '') {
                    document.getElementById("txtNarration").value = 'Payment Received';
                }

                //chkDuplicateAccount
                var chkAcct = true;
                $("#myTable tr").each(function (index, item) {
                    if (index > -1) {
                        var tds = $(this).find("td");
                        //if ($(this).closest('tr').find('td:eq(5)').text() == $('#hfAcCode').val()) {
                        if ($(this).closest('tr').find('td:eq(5)').text() == accode) {
                            chkAcct = false;
                        }
                    }
                });
                if (chkAcct == false) {
                    alert('Duplicate account entry not allowed!');
                    //$('#txtAcDesc').focus();
                    $('#ddlRecHead').focus();
                    return;
                }
                //
                
                orderItems.push({
                    AcCode: accode,//$('#hfAcCode').val().trim(),
                    DrAmount: parseFloat($('#txtDrAmount').val().trim()),
                    CrAmount: 0,
                    Narration: $('#txtNarration').val().trim(),
                    DrCr: 'd',
                    DrCrName: 'Dr',
                    AcDesc: acdesc//$('#txtAcDesc').val().trim(),
                });

                //Clear fields
                //$('#itemName').val('').focus();
                //$('#txtOrdQty,#txtRate').val('');
                $('#txtDrAmount').val('0');
                //$('#hfAcCode').val('0');
                document.getElementById("ddlRecHead").selectedIndex = 0;
                //$('#txtAcDesc,#txtNarration').val('');
                $('#txtNarration').val('');

                //populate order items
                GeneratedItemsTable();
                setAmount();
                document.getElementById("txtAcDesc").focus();

            });
            //cl-addreceipt

            //Save button click function
            $('#submit').click(function () {

                var billItems = [];

                if ($('#txtVNo').val().trim() == '') {
                    alert('No voucher number found!');
                    return;
                }

                if ($('#txtVDate').val().trim() == '') {
                    alert('Voucher date not entered!');
                    document.getElementById("txtVDate").focus();
                    return;
                }

                if (parseFloat($('#hfSumDrAmt').val()) != parseFloat($('#txtAdjAmount').val())) {
                    alert('Total receipt amount must be equal to adjustment amount!');
                    return;
                }

                if (!($('#hfPayingAuthId').val().trim() != '' && !isNaN($('#hfPayingAuthId').val().trim()))) {
                    alert('Paying authority not selected!');
                    document.getElementById("txtPayingAuthName").focus();
                    return;
                }
                if ($('#hfBillNo').val().trim() == '') {
                    alert('Bill number not selected!');
                    document.getElementById("txtBillNo").focus();
                    return;
                }
                if (!($('#txtAdjAmount').val().trim() != '' && !isNaN($('#txtAdjAmount').val().trim()))) {
                    alert('Invalid adjustment amount!');
                    document.getElementById("txtAdjAmount").focus();
                    return;
                }

                //billos entry
                billItems.push({
                    AcCode: $('#hfBillAcCode').val().trim(),
                    BillNo: $('#hfBillNo').val().trim(),
                    CrAmount: parseFloat($('#txtAdjAmount').val().trim())
                });

                //cr-entry for paying authority
                orderItems.push({
                    AcCode: $('#hfBillAcCode').val().trim(),
                    DrAmount: 0,
                    CrAmount: parseFloat($('#txtAdjAmount').val().trim()),
                    Narration: 'Payment receipt against bill',
                    DrCr: 'c',
                    DrCrName: 'Cr',
                    AcDesc: $('#txtPayingAuthName').val().trim()
                });
                
                //Save if valid
                var data = {
                    VNo: $('#txtVNo').val().trim(),
                    VDate: $('#txtVDate').val().trim(),
                    PayingAuthId: $('#hfPayingAuthId').val().trim(),
                    BillAcCode: $('#hfBillAcCode').val().trim(),
                    Info: orderItems,
                    BillOsInfo: billItems
                }

                $(this).val('Please wait...');

                $.ajax({
                    url: '/VoucherEntryBillReceipt/CreateUpdate',
                    type: "POST",
                    data: JSON.stringify(data),
                    dataType: "JSON",
                    contentType: "application/json",
                    success: function (d) {
                        //check is successfully save to database 
                        if (d.status == true) {
                            //will send status from server side
                            alert(d.message);
                            //clear form
                            orderItems = [];
                            billItems = [];
                            //$('#orderNo').val('');
                            //$('#orderDate').val('');
                            $('#orderItems').empty();
                            //$('#mylink').attr('href', '/OrderReport/OrderReportDirect' + '?vno=' + d.vno);
                            window.location.href = "../../VoucherEntryBillReceipt/CreateUpdate";
                        }
                        else {
                            alert(d.message);
                        }
                        $('#submit').val(d.AddEdit);
                    },
                    error: function () {
                        alert('Error. Please try again.');
                        //$('#submit').val('Save');
                        $('#submit').val(d.AddEdit);
                    }
                });

            });

            //edit mode
            $(function () {
                var mainObject = @Html.Raw(Json.Encode(Model))
                orderItems = @Html.Raw(Json.Encode(Model.Info.FindAll(m => m.DrCr.Equals("d"))))
                billItems = @Html.Raw(Json.Encode(Model.BillOsInfo))
                //
                txtVNo.value = mainObject.VNo;
                txtVDate.value = mainObject.VDateStr.substring(0, 10);
                hfBillAcCode.value = mainObject.BillAcCode;
                hfPayingAuthId.value = mainObject.PayingAuthId;
                txtPayingAuthName.value = mainObject.BillAcDesc;
                txtBillNo.value = mainObject.BillOsInfo[0].BillNo;
                hfBillNo.value = mainObject.BillOsInfo[0].BillNo;
                txtAdjAmount.value = mainObject.BillOsInfo[0].CrAmount;
                //
                GeneratedItemsTable();
                setAmount();
            });

            //function for show added items in table
            function GeneratedItemsTable() {
                if (orderItems.length > 0) {
                    var $table = $('<table id="myTable"/>');
                    $table.append('<th>Receiving&nbsp;Head&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th>');//0//note spaces for width
                    $table.append('<th>Receipt&nbsp;Amount</th>');//1
                    $table.append('<th>Remarks&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</th>');//2
                    $table.append('<th>Remove</th>');//3
                    $table.append('<th>Edit</th>');//4
                    $table.append('<th style="visibility:hidden;width:0px;">AcCode</th>');//5
                    $table.append('</tr></thead>');
                    var $tbody = $('<tbody/>');
                    $.each(orderItems, function (i, val) {
                        var $row = $('<tr/>');
                        //static for all rows---------------
                        $row.append($('<td/>').html(val.AcDesc));//0
                        $row.append($('<td/>').html(val.DrAmount));//1
                        $row.append($('<td/>').html(val.Narration));//2
                        //--------------------------------------------
                        var $remove = $('<a href="#">Remove</a>');
                        $remove.click(function (e) {
                            var opt = confirm("Are you sure to delete this entry?");
                            if (opt == true) {
                                e.preventDefault();
                                orderItems.splice(i, 1);
                                GeneratedItemsTable();
                                setAmount();
                            }
                        });
                        $row.append($('<td/>').html($remove));//3
                        //--------------------------------------------
                        var $edit = $('<a href="#">Edit</a>');
                        $edit.click(function (e) {
                            e.preventDefault();
                            //txtAcDesc.value = $(this).closest('tr').find('td:eq(0)').text();
                            txtDrAmount.value = $(this).closest('tr').find('td:eq(1)').text();
                            txtNarration.value = $(this).closest('tr').find('td:eq(2)').text();
                            //remove=3
                            //edit=4
                            //hfAcCode.value = $(this).closest('tr').find('td:eq(5)').text();//accode
                            ddlRecHead.value = $(this).closest('tr').find('td:eq(5)').text();//accode
                            orderItems.splice(i, 1);
                            GeneratedItemsTable();
                            setAmount();
                        });
                        //--------------------------------------------
                        $row.append($('<td/>').html($edit));//4
                        $row.append($('<td style="visibility:hidden;width:0px;"/>').html(val.AcCode));//5
                        $tbody.append($row);
                    });
                    console.log("current", orderItems);
                    $table.append($tbody);
                    $('#orderItems').html($table);
                }
                else {
                    $('#orderItems').html('');
                }
            }
        });

    </script>

    @*<script>
        function abc() {
            var w = 800;
            var h = 400;
            var left = (screen.width / 2) - (w / 2);
            var top = (screen.height / 2) - (h / 2) - 70;
            window.open('http://localhost:58521/InvoiceControl/Index', 'MyWindow', 'width=' + w + ',height=' + h + ',top=' + top + ',left=' + left + ',toolbar=0,titlebar=0,location=0,status=0,scrollbars=0,controlbox=0,addressbar=0,modal=yes');
        }
    </script>*@

}
 
<style>
    /*Adding some css for looks good*/

    textarea
    {
        font-family: inherit;
        width: 650px;
        height: 65px;
    }

    span.error {
        display:block;
        visibility:hidden;
        color:red;
        font-size:90%;
    }
 
 
    /*css for table*/
    .container td {
        vertical-align: top;
    }
    .tablecontainer table {
        width: 100%;
        border-collapse: collapse;
        border-top: 1px solid #BFAEAE;
        border-right: 1px solid #BFAEAE;
    }
    .tablecontainer th {
        border-bottom: 2px solid #BFAEAE !important;
    }
    .tablecontainer th, .tablecontainer td {
        text-align: left;
        border-left: 1px solid #BFAEAE;
        padding: 5px;
        border-bottom: 1px solid #BFAEAE;
    }
    .ui-widget {
        font-size:12px !important;
    }
</style>

