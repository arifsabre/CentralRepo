@model ManufacturingManagement_V2.Models.CalibrationMdl

@{
    ViewBag.Title = "CreateUpdate";
    Layout = "~/views/shared/_LayoutCommon.cshtml";
}

<h4><b>Calibration Entry</b></h4>

@using (Html.BeginForm())
{
    @Html.ValidationSummary(true)

    <div class="form-group">
        <table class="table table-bordered">
            <tr>
                <td colspan="2">
                    <b>Note: Use of Edit/Update option is for correction of records only, otherwise 'Create New' is to be used always for every calibration entry.</b>
                </td>
            </tr>
            <tr>
                @Html.HiddenFor(model => model.RecId)
                <td style="width:12%">@Html.LabelFor(model => model.ImteTypeId)</td>
                <td>
                    @Html.DropDownListFor(model => model.ImteTypeId, ViewBag.ImteTypeList as SelectList,
                    new { @onclick = "fillImteList()", @id = "ddlImteType" })
                    @Html.ValidationMessageFor(model => model.ImteTypeId)
                </td>
            </tr>
            <tr>
                <td>@Html.LabelFor(model => model.IdNo)</td>
                <td>
                    @Html.DropDownListFor(model => model.ImteId, ViewBag.ImteList as SelectList, new { @id = "ddlImte" })
                    @Html.ValidationMessageFor(model => model.IdNo)
                </td>
            </tr>
            <tr>
                <td>@Html.LabelFor(model => model.CalibDate)</td>
                <td>
                    @Html.EditorFor(model => model.CalibDate)
                    @Html.ValidationMessageFor(model => model.CalibDate)
                </td>
            </tr>
            <tr>
                <td>@Html.LabelFor(model => model.CertificateNo)</td>
                <td>
                    @Html.EditorFor(model => model.CertificateNo)
                    @Html.ValidationMessageFor(model => model.CertificateNo)
                </td>
            </tr>
            <tr>
                <td>@Html.LabelFor(model => model.CertifiedBy)</td>
                <td>
                    @Html.EditorFor(model => model.CertifiedBy)
                    @Html.ValidationMessageFor(model => model.CertifiedBy)
                </td>
            </tr>
            <tr>
                <td>@Html.LabelFor(model => model.NextCalibDate)</td>
                <td>
                    @Html.EditorFor(model => model.NextCalibDate)
                    @Html.ValidationMessageFor(model => model.NextCalibDate)
                </td>
            </tr>
        </table>
    </div>
    <p>
        <input type="submit" class="btn btn-default" value='@ViewBag.AddEdit' />
        @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-default" })
    </p>
    <h5><b>@ViewBag.Message</b></h5>
}

<link rel="stylesheet" href="//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css">
<link rel="stylesheet" href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="//code.jquery.com/ui/1.11.4/jquery-ui.js"></script>

    <script type="text/javascript">
        $(function () {
            $("input[type=text]").first().focus();
        });
    </script>

    <script>
        function fillImteList() {
            var liObj = document.getElementById("ddlImteType");
            var sIndex = liObj.selectedIndex;
            var ccode = liObj.options[sIndex].value;
            if (ccode.length == 0) {
                ccode = 0;
            }
            $.ajax({
                cache: false,
                async: false,
                type: "POST",
                url: "@(Url.Action("getImteList", "HelpUtility"))",
                data: { "imtetypeid": ccode },
                success: function (data) {
                    //getting multiple records as (key,value) pair type list
                    $("#ddlImte").empty(); // clear before appending new list
                    $("#ddlImte").append($('<option />', {
                        value: "0",
                        text: "--Select--"
                    }));
                    $.each(data, function (i, item) {
                        $("#ddlImte").append($('<option />', {
                            value: item.Key,
                            text: item.Value
                        }));
                    });
                    action = data.Action;
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to retrieve states.');
                }
            });
        }
    </script>

}


