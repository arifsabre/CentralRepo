using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using Microsoft.Reporting.WebForms;
using ManufacturingManagement_V2.Models;
using System.Data;
using System.Collections;

namespace ManufacturingManagement_V2.Controllers
{
    public class EmployeeReportController : Controller
    {
        clsCookie objCookie = new clsCookie();
        clsMyClass mc = new clsMyClass();
        private CompanyBLL compBLL = new CompanyBLL();
        private QualificationBLL qualBLL = new QualificationBLL();

        private void setViewData()
        {
            ViewData["UserName"] = objCookie.getUserName();
            ViewData["CompName"] = objCookie.getCmpName();
            ViewData["FinYear"] = objCookie.getFinYear();
            ViewData["Dept"] = objCookie.getDepartment();
            ViewData["mnuOpt"] = objCookie.getMenu();
        }

        public ActionResult Index()
        {
            if (objCookie.checkSessionState() == false) { return RedirectToAction("LoginUser", "Login"); };
            setViewData();
            ViewBag.GradeList = new SelectList(mc.getGradeList(), "Value", "Text");
            ViewBag.CompanyList = new SelectList(compBLL.getObjectList(), "compcode", "cmpname");
            ViewBag.EmpCategoryList = new SelectList(mc.getEmpCategoryListReport(), "Value", "Text");
            ViewBag.DepartmentList = new SelectList(UserBLL.Instance.getDepartmentList(), "depcode", "Department");
            ViewBag.ServiceTypeList = new SelectList(mc.getServiceTypeList(), "Value", "Text");
            ViewBag.ReportFormatList = new SelectList(mc.getReportFormatList(), "Value", "Text");
            ViewBag.QualificationList = new SelectList(qualBLL.getObjectList(), "qualid", "qualification");
            ViewBag.CasteList = new SelectList(EmployeeBLL.Instance.getCasteList(), "ObjectId", "ObjectName");
            ViewBag.LocationList = new SelectList(EmployeeBLL.Instance.getLocationList(), "ObjectId", "ObjectName");
            ViewBag.AgencyList = new SelectList(EmployeeBLL.Instance.getAgencyList(), "ObjectId", "ObjectName");
            rptOptionMdl rptOption = new rptOptionMdl();
            rptOption.DateFrom = objCookie.getFromDate();
            rptOption.DateTo = objCookie.getDispToDate();
            rptOption.EmpColumns = getEmpColumnsList();
            //rptOption.SelectedEmpColumns = rptOption.EmpColumns.Select(x => x.EmpCol).ToArray();
            rptOption.SelectedEmpColumns = rptOption.EmpColumns.Where(m => m.EmpCol.Equals("NewEmpId")).ToList().Select(x => x.EmpCol).ToArray();
            return View(rptOption);
        }

        internal List<EmpColumns> getEmpColumnsList()
        {
            //[100088]
            DataSet ds = new DataSet();
            ds.Tables.Add();
            ds.Tables[0].Columns.Add("EmpCol");
            ds.Tables[0].Columns.Add("EmpColName");
            //generated by select 'ds.Tables[0].Rows.Add("'+name+'","'+name+'");'
            //from sys.columns where object_id=1963922118

            ds.Tables[0].Rows.Add("NewEmpId", "NewEmpId");
            ds.Tables[0].Rows.Add("EmpId", "EmpId");
            ds.Tables[0].Rows.Add("Title", "Title");
            ds.Tables[0].Rows.Add("EmpName", "EmpName");

            ds.Tables[0].Rows.Add("DepName", "DepName");
            ds.Tables[0].Rows.Add("Designation", "Designation");

            ds.Tables[0].Rows.Add("CategoryName", "CategoryName");
            ds.Tables[0].Rows.Add("AppDateStr", "AppDateStr");
            ds.Tables[0].Rows.Add("IsActive", "IsActive");
            ds.Tables[0].Rows.Add("ReferredBy", "ReferredBy");

            ds.Tables[0].Rows.Add("JobDesc", "JobDesc");
            ds.Tables[0].Rows.Add("JoiningDateStr", "JoiningDateStr");
            ds.Tables[0].Rows.Add("JoiningUnit", "JoiningUnit");

            ds.Tables[0].Rows.Add("ServiceTypeName", "ServiceTypeName");
            ds.Tables[0].Rows.Add("Qualification", "Qualification");
            ds.Tables[0].Rows.Add("PrevExp", "PrevExp");

            ds.Tables[0].Rows.Add("GenderName", "GenderName");
            ds.Tables[0].Rows.Add("GradeName", "GradeName");
            ds.Tables[0].Rows.Add("FatherName", "FatherName");
            ds.Tables[0].Rows.Add("FatherOccupation", "FatherOccupation");

            ds.Tables[0].Rows.Add("MotherName", "MotherName");
            ds.Tables[0].Rows.Add("MotherOccupation", "MotherOccupation");

            ds.Tables[0].Rows.Add("MaritalStatus", "MaritalStatus");
            ds.Tables[0].Rows.Add("SpouseAge", "SpouseAge");
            ds.Tables[0].Rows.Add("SpouseName", "SpouseName");
            ds.Tables[0].Rows.Add("SpouseOccupation", "SpouseOccupation");
            ds.Tables[0].Rows.Add("SpouseQual", "SpouseQual");
            ds.Tables[0].Rows.Add("AnnivDateStr", "AnnivDateStr");

            ds.Tables[0].Rows.Add("NameOnPassbook", "NameOnPassbook");
            ds.Tables[0].Rows.Add("BankName", "BankName");
            ds.Tables[0].Rows.Add("AccountNo", "AccountNo");
            ds.Tables[0].Rows.Add("BranchAddress", "BranchAddress");
            ds.Tables[0].Rows.Add("IfscCode", "IfscCode");
            ds.Tables[0].Rows.Add("MicrCode", "MicrCode");

            ds.Tables[0].Rows.Add("BGroup", "BGroup");
            ds.Tables[0].Rows.Add("BirthDateStr", "BirthDateStr");
            ds.Tables[0].Rows.Add("ContactNo", "ContactNo");
            ds.Tables[0].Rows.Add("Email", "Email");

            ds.Tables[0].Rows.Add("AadharNo", "AadharNo");
            ds.Tables[0].Rows.Add("DrvLicNo", "DrvLicNo");
            ds.Tables[0].Rows.Add("UAN", "UAN");
            ds.Tables[0].Rows.Add("PanNo", "PanNo");
            ds.Tables[0].Rows.Add("PassportNo", "PassportNo");
            ds.Tables[0].Rows.Add("CasteName", "CasteName");
            ds.Tables[0].Rows.Add("LICId", "LICId");
            ds.Tables[0].Rows.Add("VoterIdNo", "VoterIdNo");

            ds.Tables[0].Rows.Add("PFApplicable", "PFApplicable");
            ds.Tables[0].Rows.Add("PFNumber", "PFNumber");
            ds.Tables[0].Rows.Add("PFNominee", "PFNominee");
            ds.Tables[0].Rows.Add("PFNomineeAge", "PFNomineeAge");
            ds.Tables[0].Rows.Add("PFNomineeRelation", "PFNomineeRelation");
            
            ds.Tables[0].Rows.Add("ESIApplicable", "ESIApplicable");
            ds.Tables[0].Rows.Add("ESINumber", "ESINumber");
            ds.Tables[0].Rows.Add("ESINominee", "ESINominee");
            ds.Tables[0].Rows.Add("ESINomineeAge", "ESINomineeAge");
            ds.Tables[0].Rows.Add("ESINomineeRelation", "ESINomineeRelation");

            ds.Tables[0].Rows.Add("CCity", "CCity");
            ds.Tables[0].Rows.Add("CAddress", "CAddress");

            ds.Tables[0].Rows.Add("PCity", "PCity");
            ds.Tables[0].Rows.Add("PAddress", "PAddress");

            ds.Tables[0].Rows.Add("VillageName", "VillageName");
            //ds.Tables[0].Rows.Add("District", "District");
            ds.Tables[0].Rows.Add("StateName", "StateName");
            ds.Tables[0].Rows.Add("PhoneExtNo", "PhoneExtNo");
            ds.Tables[0].Rows.Add("PhoneNo", "PhoneNo");
            ds.Tables[0].Rows.Add("PoliceStation", "PoliceStation");
            ds.Tables[0].Rows.Add("PostOffice", "PostOffice");
            
            ds.Tables[0].Rows.Add("SubDivision", "SubDivision");

            ds.Tables[0].Rows.Add("BasicRate", "BasicRate");
            ds.Tables[0].Rows.Add("DA", "DA");
            ds.Tables[0].Rows.Add("IncAmount", "IncAmount");
            ds.Tables[0].Rows.Add("DWAllowance", "DWAllowance");
            ds.Tables[0].Rows.Add("ConvAllowance", "ConvAllowance");
            ds.Tables[0].Rows.Add("CompAllowance", "CompAllowance");
            ds.Tables[0].Rows.Add("HRA", "HRA");
            ds.Tables[0].Rows.Add("MedicalAllowance", "MedicalAllowance");
            ds.Tables[0].Rows.Add("SpecialPay", "SpecialPay");
            ds.Tables[0].Rows.Add("Others", "Others");
            ds.Tables[0].Rows.Add("TDSDeduction", "TDSDeduction");
            ds.Tables[0].Rows.Add("GrossSalary", "GrossSalary");

            ds.Tables[0].Rows.Add("EmgContactNo", "EmgContactNo");
            ds.Tables[0].Rows.Add("EmgContactNo2", "EmgContactNo2");
            ds.Tables[0].Rows.Add("EmgContactPer", "EmgContactPer");
            ds.Tables[0].Rows.Add("EmgContactPer2", "EmgContactPer2");

            ds.Tables[0].Rows.Add("RefAddress1", "RefAddress1");
            ds.Tables[0].Rows.Add("RefAddress2", "RefAddress2");
            ds.Tables[0].Rows.Add("RefContactNo1", "RefContactNo1");
            ds.Tables[0].Rows.Add("RefContactNo2", "RefContactNo2");
            ds.Tables[0].Rows.Add("RefName1", "RefName1");
            ds.Tables[0].Rows.Add("RefName2", "RefName2");

            ds.Tables[0].Rows.Add("Religion", "Religion");
            ds.Tables[0].Rows.Add("IdentMark", "IdentMark");

            ds.Tables[0].Rows.Add("LeavingDateStr", "LeavingDateStr");
            ds.Tables[0].Rows.Add("Reason", "Reason");
            ds.Tables[0].Rows.Add("OnroleDateStr", "OnroleDateStr");
            ds.Tables[0].Rows.Add("Doc", "Doc");
            ds.Tables[0].Rows.Add("UpdationLog", "UpdationLog");

            ds.Tables[0].Rows.Add("TransferDateStr", "TransferDateStr");
            ds.Tables[0].Rows.Add("GroupJoiningDateStr", "GroupJoiningDateStr");

            ds.Tables[0].Rows.Add("AgencyName", "AgencyName");
            ds.Tables[0].Rows.Add("LocationName", "LocationName");

            //detail section
            ds.Tables[0].Rows.Add("QualificationDetail", "QualificationDetail");
            ds.Tables[0].Rows.Add("ExperienceDetail", "ExperienceDetail");
            ds.Tables[0].Rows.Add("FamilyDetail", "FamilyDetail");
            ds.Tables[0].Rows.Add("NomineeDetail", "NomineeDetail");
            //---------------------

            ds.Tables[0].DefaultView.Sort = "EmpColName asc";
            DataTable dtr = ds.Tables[0].DefaultView.ToTable();

            List<EmpColumns> objlist = new List<EmpColumns> { };
            //foreach (DataRow dr in ds.Tables[0].Rows)
            foreach (DataRow dr in dtr.Rows)
            {
                EmpColumns objmdl = new EmpColumns();
                objmdl.EmpCol = dr["EmpCol"].ToString();
                objmdl.EmpColName = dr["EmpColName"].ToString();
                objlist.Add(objmdl);
            }
            return objlist;
        }
        //

        #region employee report

        [HttpPost]
        public ActionResult EmployeeReport(rptOptionMdl rptOption)
        {
            //[100088]/F1
            if (objCookie.checkSessionState() == false) { return RedirectToAction("LoginUser", "Login"); };
            setViewData();
            bool viewper = mc.getPermission(Entry.Employee_Report, permissionType.Add);
            if (viewper == false)//no permission
            {
                return Content("<a href='#' onclick='javascript:window.close();'><h1>Permission Denied!</h1></a>");
            }
            bool downloadper = mc.getPermission(Entry.Employee_Report, permissionType.Edit);
            if (downloadper == false) { rptOption.ReportFormat = "pdf"; };
            Session["xsid"] = objCookie.getUserId();
            if (viewper == true && downloadper == false)//view only
            {
                string reporturl = "EmployeeReport/getEmployeeReportFile";
                string reportpms = "&dtfrom=" + mc.getStringByDateForReport(rptOption.DateFrom) + "";
                reportpms += "&dtto=" + mc.getStringByDateForReport(rptOption.DateTo) + "";
                reportpms += "&grade=" + rptOption.Grade + "";
                reportpms += "&depcode=" + rptOption.DepCode + "";
                reportpms += "&compcode=" + rptOption.CompCode + "";
                reportpms += "&emptype=" + rptOption.EmpType + "";
                reportpms += "&sorton=" + rptOption.SortColumn + "";
                reportpms += "&sortorder=" + rptOption.SortOrder + "";
                reportpms += "&rptformat=" + rptOption.ReportFormat + "";
                reportpms += "&filterbydt=" + rptOption.Detailed + "";
                reportpms += "&categoryid=" + rptOption.CategoryId + "";
                reportpms += "&qualid=" + rptOption.ItemId + "";
                reportpms += "&casteid=" + rptOption.ObjectId + "";
                reportpms += "&agencyid=" + rptOption.AgencyId + "";
                reportpms += "&locationid=" + rptOption.LocationId + "";
                return RedirectToAction("IndexIFrameRpt", "Home", new { reporturl = reporturl, reportpms = reportpms });
            }
            //full access with download (no escalation)
            return RedirectToAction("getEmployeeReportFile", new { dtfrom = rptOption.DateFrom, dtto = rptOption.DateTo, grade = rptOption.Grade, depcode = rptOption.DepCode, compcode = rptOption.CompCode, emptype = rptOption.EmpType, sorton = rptOption.SortColumn, sortorder = rptOption.SortOrder, rptformat = rptOption.ReportFormat, filterbydt=rptOption.Detailed, categoryid = rptOption.CategoryId, qualid=rptOption.ItemId, casteid=rptOption.ObjectId, agencyid=rptOption.AgencyId, locationid=rptOption.LocationId });
        }

        public ActionResult getEmployeeReportFile(DateTime dtfrom, DateTime dtto, string grade = "", string depcode = "", int compcode = 0, string emptype = "a", string sorton = "empid", string sortorder = "asc", string rptformat = "pdf", bool filterbydt = false, int categoryid = 0, int qualid=0, int casteid=0, int agencyid=0, int locationid=0)
        {
            if (mc.isValidToDisplayReport() == false)
            {
                return File(Server.MapPath("~/App_Data/EmpDocs/") + "/blank/Permission.png", "png");
            }
            //
            EmployeeReportBLL rptBLL = new EmployeeReportBLL();
            LocalReport localReport = new LocalReport();
            //[100088]/F1
            localReport.ReportPath = Server.MapPath("~/Reports/EmployeeRpt.rdlc");
            System.Data.DataTable dtr = new System.Data.DataTable();
            dtr = rptBLL.getEmployeeReportData(grade, depcode, compcode, emptype, sorton, sortorder, dtfrom, dtto, filterbydt, categoryid, qualid, casteid, agencyid, locationid);
            string rpthead = rptBLL.Message;
            Reports.dsReport dsr = new Reports.dsReport();
            dsr.Tables["tbl_employee"].Merge(dtr);
            //
            ReportParameter rp = new ReportParameter("prRptHead", "Employee Report  " + rpthead);
            localReport.SetParameters(new ReportParameter[] { rp });
            //
            ReportDataSource reportDataSource = new ReportDataSource("dsReport", dsr.Tables["tbl_employee"]);
            localReport.DataSources.Add(reportDataSource);
            //
            string filename = "EmployeeReport." + mc.getNameByKey(mc.getReportFormats(), "format", rptformat, "ext");
            string mimeType;
            string encoding;
            string fileNameExtension;
            string deviceInfo =
            "<DeviceInfo>" +
            "  <OutputFormat>'" + rptformat + "'</OutputFormat>" +
            //"  <PageWidth>297mm</PageWidth>" +
            "  <PageWidth>310mm</PageWidth>" +
            "  <PageHeight>210mm</PageHeight>" +
            "  <MarginTop>0.3in</MarginTop>" +
            "  <MarginLeft>0.75in</MarginLeft>" +
            "  <MarginRight>0.3in</MarginRight>" +
            "  <MarginBottom>0.3in</MarginBottom>" +
            "  <FileName>'" + filename + "'</FileName>" +
            "</DeviceInfo>";
            //
            Warning[] warnings;
            string[] streams;
            byte[] renderedBytes;
            //Render the report
            renderedBytes = localReport.Render(
                rptformat,
                deviceInfo,
                out mimeType,
                out encoding,
                out fileNameExtension,
                out streams,
                out warnings);
            //Response.AddHeader("content-disposition", "attachment; filename=NorthWindCustomers." + fileNameExtension);
            return File(renderedBytes, mimeType);

        }

        #endregion

        #region employee register

        [HttpPost]
        public ActionResult EmployeeRegister(rptOptionMdl rptOption)
        {
            //[100088]/F2
            if (objCookie.checkSessionState() == false) { return RedirectToAction("LoginUser", "Login"); };
            setViewData();
            bool viewper = mc.getPermission(Entry.Employee_Report, permissionType.Add);
            if (viewper == false)//no permission
            {
                return Content("<a href='#' onclick='javascript:window.close();'><h1>Permission Denied!</h1></a>");
            }
            bool downloadper = mc.getPermission(Entry.Employee_Report, permissionType.Edit);
            if (downloadper == false) { rptOption.ReportFormat = "pdf"; };
            Session["xsid"] = objCookie.getUserId();
            if (viewper == true && downloadper == false)//view only
            {
                string reporturl = "EmployeeReport/getEmployeeRegisterFile";
                string reportpms = "&dtfrom=" + mc.getStringByDateForReport(rptOption.DateFrom) + "";
                reportpms += "&dtto=" + mc.getStringByDateForReport(rptOption.DateTo) + "";
                reportpms += "&grade=" + rptOption.Grade + "";
                reportpms += "&depcode=" + rptOption.DepCode + "";
                reportpms += "&compcode=" + rptOption.CompCode + "";
                reportpms += "&emptype=" + rptOption.EmpType + "";
                reportpms += "&sorton=" + rptOption.SortColumn + "";
                reportpms += "&sortorder=" + rptOption.SortOrder + "";
                reportpms += "&rptformat=" + rptOption.ReportFormat + "";
                reportpms += "&filterbydt=" + rptOption.Detailed + "";
                reportpms += "&filternarec=" + rptOption.Above58 + "";
                reportpms += "&categoryid=" + rptOption.CategoryId + "";
                reportpms += "&qualid=" + rptOption.ItemId + "";
                reportpms += "&casteid=" + rptOption.ObjectId + "";
                reportpms += "&agencyid=" + rptOption.AgencyId + "";
                reportpms += "&locationid=" + rptOption.LocationId + "";
                return RedirectToAction("IndexIFrameRpt", "Home", new { reporturl = reporturl, reportpms = reportpms });
            }
            //full access with download (no escalation)
            return RedirectToAction("getEmployeeRegisterFile", new { dtfrom = rptOption.DateFrom, dtto = rptOption.DateTo, grade = rptOption.Grade, depcode = rptOption.DepCode, compcode = rptOption.CompCode, emptype = rptOption.EmpType, sorton = rptOption.SortColumn, sortorder = rptOption.SortOrder, rptformat = rptOption.ReportFormat, filterbydt = rptOption.Detailed, categoryid = rptOption.CategoryId, qualid=rptOption.ItemId, casteid=rptOption.ObjectId, agencyid=rptOption.AgencyId, locationid=rptOption.LocationId });
        }

        public ActionResult getEmployeeRegisterFile(DateTime dtfrom, DateTime dtto, string grade = "", string depcode = "", int compcode = 0, string emptype = "a", string sorton = "empid", string sortorder = "asc", string rptformat = "pdf", bool filterbydt = false, int categoryid = 0, int qualid=0, int casteid=0, int agencyid=0, int locationid=0)
        {
            if (mc.isValidToDisplayReport() == false)
            {
                return File(Server.MapPath("~/App_Data/EmpDocs/") + "/blank/Permission.png", "png");
            }
            //
            EmployeeReportBLL rptBLL = new EmployeeReportBLL();
            LocalReport localReport = new LocalReport();
            //[100088]/F2
            localReport.ReportPath = Server.MapPath("~/Reports/EmployeeRegisterRpt.rdlc");
            System.Data.DataTable dtr = new System.Data.DataTable();
            dtr = rptBLL.getEmployeeReportData(grade, depcode, compcode, emptype, sorton, sortorder, dtfrom, dtto, filterbydt, categoryid, qualid, casteid, agencyid, locationid);
            string rpthead = rptBLL.Message;
            Reports.dsReport dsr = new Reports.dsReport();
            dsr.Tables["tbl_employee"].Merge(dtr);
            //
            ReportParameter rp = new ReportParameter("prRptHead", "Employee Register  " + rpthead);
            localReport.SetParameters(new ReportParameter[] { rp });
            //
            ReportDataSource reportDataSource = new ReportDataSource("dsReport", dsr.Tables["tbl_employee"]);
            localReport.DataSources.Add(reportDataSource);
            //
            string filename = "EmployeeRegister." + mc.getNameByKey(mc.getReportFormats(), "format", rptformat, "ext");
            string mimeType;
            string encoding;
            string fileNameExtension;
            string deviceInfo =
            "<DeviceInfo>" +
            "  <OutputFormat>'" + rptformat + "'</OutputFormat>" +
            "  <PageWidth>1640mm</PageWidth>" +
            //"  <PageHeight>210mm</PageHeight>" +
            "  <MarginTop>0.3in</MarginTop>" +
            "  <MarginLeft>0.75in</MarginLeft>" +
            "  <MarginRight>0.3in</MarginRight>" +
            "  <MarginBottom>0.3in</MarginBottom>" +
            "  <FileName>'" + filename + "'</FileName>" +
            "</DeviceInfo>";
            //
            Warning[] warnings;
            string[] streams;
            byte[] renderedBytes;
            //Render the report
            renderedBytes = localReport.Render(
                rptformat,
                deviceInfo,
                out mimeType,
                out encoding,
                out fileNameExtension,
                out streams,
                out warnings);
            //Response.AddHeader("content-disposition", "attachment; filename=NorthWindCustomers." + fileNameExtension);
            return File(renderedBytes, mimeType);
        }

        #endregion

        #region employee register HTML

        [HttpPost]
        public ActionResult EmployeeRegisterHTML(rptOptionMdl rptOption)
        {
            //[100088]/F3
            if (objCookie.checkSessionState() == false) { return RedirectToAction("LoginUser", "Login"); };
            setViewData();
            bool viewper = mc.getPermission(Entry.Employee_Report, permissionType.Add);
            if (viewper == false)//no permission
            {
                return Content("<a href='#' onclick='javascript:window.close();'><h1>Permission Denied!</h1></a>");
            }
            bool downloadper = mc.getPermission(Entry.Employee_Report, permissionType.Edit);
            Session["xsid"] = objCookie.getUserId();
            string cols = "";
            for (int i = 0; i < rptOption.SelectedEmpColumns.Length; i++)
            {
                cols +=rptOption.SelectedEmpColumns[i]+",";
            }
            //ExportToExcelCHK//getEmployeeRegisterHTML
            string methodName = "getEmployeeRegisterHTML";
            if (rptOption.ReportFormat.ToLower() == "excel")
            {
                methodName = "EmployeeRegisterExcel";
            }
            return RedirectToAction(methodName, new { dtfrom = rptOption.DateFrom, dtto = rptOption.DateTo, selcols = cols, grade = rptOption.Grade, depcode = rptOption.DepCode, compcode = rptOption.CompCode, emptype = rptOption.EmpType, sorton = rptOption.SortColumn, sortorder = rptOption.SortOrder, rptformat = rptOption.ReportFormat, filterbydt = rptOption.Detailed, categoryid = rptOption.CategoryId, qualid = rptOption.ItemId, filternarec = rptOption.Above58, casteid=rptOption.ObjectId, agencyid=rptOption.AgencyId, locationid=rptOption.LocationId});
        }

        public ActionResult EmployeeRegisterExcel(DateTime dtfrom, DateTime dtto, string selcols, string grade = "", string depcode = "", int compcode = 0, string emptype = "a", string sorton = "empid", string sortorder = "asc", string rptformat = "pdf", bool filterbydt = false, int categoryid = 0, int qualid = 0, bool filternarec = false, int casteid=0, int agencyid=0, int locationid=0)
        {
            //[100088]/F4
            //filternarec and detail-records are not applicable here
            EmployeeReportBLL rptBLL = new EmployeeReportBLL();
            LocalReport localReport = new LocalReport();
            System.Data.DataTable dtr = new System.Data.DataTable();
            dtr = rptBLL.getEmployeeReportData(grade, depcode, compcode, emptype, sorton, sortorder, dtfrom, dtto, filterbydt, categoryid, qualid, casteid, agencyid, locationid);
            string rpthead = rptBLL.Message;
            //
            dtr.Columns.Add("AppDateStr");
            dtr.Columns.Add("JoiningDateStr");
            dtr.Columns.Add("AnnivDateStr");
            dtr.Columns.Add("BirthDateStr");
            dtr.Columns.Add("LeavingDateStr");
            dtr.Columns.Add("OnRoleDateStr");
            dtr.Columns.Add("TransferDateStr");
            dtr.Columns.Add("GroupJoiningDateStr");
            for (int i = 0; i < dtr.Rows.Count; i++)
            {
                dtr.Rows[i]["AppDateStr"] = mc.getStringByDate(Convert.ToDateTime(dtr.Rows[i]["AppDate"].ToString()));
                dtr.Rows[i]["JoiningDateStr"] = mc.getStringByDate(Convert.ToDateTime(dtr.Rows[i]["JoiningDate"].ToString()));
                dtr.Rows[i]["AnnivDateStr"] = mc.getStringByDate(Convert.ToDateTime(dtr.Rows[i]["AnnivDate"].ToString()));
                dtr.Rows[i]["BirthDateStr"] = mc.getStringByDate(Convert.ToDateTime(dtr.Rows[i]["BirthDate"].ToString()));
                dtr.Rows[i]["LeavingDateStr"] = mc.getStringByDate(Convert.ToDateTime(dtr.Rows[i]["LeavingDate"].ToString()));
                dtr.Rows[i]["OnRoleDateStr"] = mc.getStringByDate(Convert.ToDateTime(dtr.Rows[i]["OnRoleDate"].ToString()));
                dtr.Rows[i]["TransferDateStr"] = mc.getStringByDate(Convert.ToDateTime(dtr.Rows[i]["TransferDate"].ToString()));
                dtr.Rows[i]["GroupJoiningDateStr"] = mc.getStringByDate(Convert.ToDateTime(dtr.Rows[i]["GroupJoiningDate"].ToString()));
            }
            //removing columns which are not in arl
            DataTable dtx = new DataTable();
            string[] arl = selcols.Substring(0, selcols.Length - 1).Split(',');
            for (int i = 0; i < arl.Length; i++)
            {
                if (dtr.Columns.Contains(arl[i].ToString()))
                {
                    dtx.Columns.Add(arl[i].ToString());
                }
            }
            DataRow dr = dtx.NewRow();
            for (int i = 0; i < dtr.Rows.Count; i++)
            {
                dr = dtx.NewRow();
                for (int j = 0; j < arl.Length; j++)
                {
                    if (dtx.Columns.Contains(arl[j].ToString()))
                    {
                        dr[arl[j].ToString()] = dtr.Rows[i][arl[j]].ToString();
                    }
                }
                dtx.Rows.Add(dr);
            }
            //
            var grid = new System.Web.UI.WebControls.GridView();
            grid.DataSource = dtx;
            grid.DataBind();
            //
            Response.ClearContent();
            Response.Buffer = true;
            Response.AddHeader("content-disposition", "attachment; filename=EmployeeRegister.xls");
            Response.ContentType = "application/ms-excel";
            //
            Response.Charset = "";
            System.IO.StringWriter sw = new System.IO.StringWriter();
            System.Web.UI.HtmlTextWriter htw = new System.Web.UI.HtmlTextWriter(sw);
            //
            //for company group
            htw.AddAttribute("CustomAttribute", "CustomAttributeValue");
            htw.AddStyleAttribute(System.Web.UI.HtmlTextWriterStyle.FontSize, "16pt");
            htw.AddStyleAttribute(System.Web.UI.HtmlTextWriterStyle.FontWeight, "bold");
            htw.AddStyleAttribute(System.Web.UI.HtmlTextWriterStyle.TextAlign, "center");
            htw.AddStyleAttribute("Customstyle", "CustomStyleValue");
            htw.RenderBeginTag(System.Web.UI.HtmlTextWriterTag.Span);
            htw.WriteLine("PRAG GROUP: Employee Regster");
            htw.WriteBreak();
            //for report head
            htw.AddStyleAttribute(System.Web.UI.HtmlTextWriterStyle.FontSize, "14pt");
            htw.AddStyleAttribute(System.Web.UI.HtmlTextWriterStyle.FontWeight, "bold");
            htw.AddStyleAttribute(System.Web.UI.HtmlTextWriterStyle.TextAlign, "center");
            htw.AddStyleAttribute("Customstyle", "CustomStyleValue");
            htw.RenderBeginTag(System.Web.UI.HtmlTextWriterTag.Span);
            htw.WriteLine(rpthead);
            htw.WriteBreak();
            //
            grid.RenderControl(htw);
            //
            htw.AddStyleAttribute(System.Web.UI.HtmlTextWriterStyle.FontSize, "10pt");
            htw.AddStyleAttribute(System.Web.UI.HtmlTextWriterStyle.FontWeight, "regular");
            htw.AddStyleAttribute("Customstyle", "CustomStyleValue");
            htw.RenderBeginTag(System.Web.UI.HtmlTextWriterTag.Span);
            htw.WriteLine("---End of Report---[100088]/F4, Detail-records are not applicable here.");
            htw.WriteBreak();
            //
            Response.Output.Write(sw.ToString());
            Response.Flush();
            Response.End();
            //
            return View();
            //
        }

        public ActionResult getEmployeeRegisterHTML(DateTime dtfrom, DateTime dtto, string selcols, string grade = "", string depcode = "", int compcode = 0, string emptype = "a", string sorton = "empid", string sortorder = "asc", string rptformat = "pdf", bool filterbydt = false, int categoryid = 0, int qualid=0, bool filternarec = false, int casteid = 0, int agencyid=0, int locationid=0)
        {
            //[100088]/F3
            if (mc.isValidToDisplayReport() == false)
            {
                return File(Server.MapPath("~/App_Data/EmpDocs/") + "/blank/Permission.png", "png");
            }
            //
            string[] arl = selcols.Substring(0,selcols.Length-1).Split(',');
            EmployeeReportBLL rptBLL = new EmployeeReportBLL();
            LocalReport localReport = new LocalReport();
            localReport.ReportPath = Server.MapPath("~/Reports/EmployeeRegisterRpt.rdlc");
            System.Data.DataTable dtr = new System.Data.DataTable();
            dtr = rptBLL.getEmployeeReportData(grade, depcode, compcode, emptype, sorton, sortorder, dtfrom, dtto, filterbydt, categoryid, qualid, casteid, agencyid, locationid);
            dtr.Columns.Add("AppDateStr");
            dtr.Columns.Add("JoiningDateStr");
            dtr.Columns.Add("AnnivDateStr");
            dtr.Columns.Add("BirthDateStr");
            dtr.Columns.Add("LeavingDateStr");
            dtr.Columns.Add("OnRoleDateStr");
            dtr.Columns.Add("QualificationDetail");
            dtr.Columns.Add("ExperienceDetail");
            dtr.Columns.Add("FamilyDetail");
            dtr.Columns.Add("NomineeDetail");
            dtr.Columns.Add("TransferDateStr");
            dtr.Columns.Add("GroupJoiningDateStr");
            for (int i = 0; i < dtr.Rows.Count; i++)
            {
                dtr.Rows[i]["AppDateStr"] = mc.getStringByDate(Convert.ToDateTime(dtr.Rows[i]["AppDate"].ToString()));
                dtr.Rows[i]["JoiningDateStr"] = mc.getStringByDate(Convert.ToDateTime(dtr.Rows[i]["JoiningDate"].ToString()));
                dtr.Rows[i]["AnnivDateStr"] = mc.getStringByDate(Convert.ToDateTime(dtr.Rows[i]["AnnivDate"].ToString()));
                dtr.Rows[i]["BirthDateStr"] = mc.getStringByDate(Convert.ToDateTime(dtr.Rows[i]["BirthDate"].ToString()));
                dtr.Rows[i]["LeavingDateStr"] = mc.getStringByDate(Convert.ToDateTime(dtr.Rows[i]["LeavingDate"].ToString()));
                dtr.Rows[i]["OnRoleDateStr"] = mc.getStringByDate(Convert.ToDateTime(dtr.Rows[i]["OnRoleDate"].ToString()));
                dtr.Rows[i]["TransferDateStr"] = mc.getStringByDate(Convert.ToDateTime(dtr.Rows[i]["TransferDate"].ToString()));
                dtr.Rows[i]["GroupJoiningDateStr"] = mc.getStringByDate(Convert.ToDateTime(dtr.Rows[i]["GroupJoiningDate"].ToString()));
            }
            //familydetail
            if (arl.Contains("FamilyDetail"))
            {
                for (int i = 0; i < dtr.Rows.Count; i++)
                {
                    dtr.Rows[i]["FamilyDetail"] = getFamilyDetail(Convert.ToInt32(dtr.Rows[i]["newempid"].ToString()), filternarec);  
                }
            }
            //qualificationdetail
            if (arl.Contains("QualificationDetail"))
            {
                for (int i = 0; i < dtr.Rows.Count; i++)
                {
                    dtr.Rows[i]["QualificationDetail"] = getQualificationDetail(Convert.ToInt32(dtr.Rows[i]["newempid"].ToString()), filternarec);
                }
            }
            //experiencedetail
            if (arl.Contains("ExperienceDetail"))
            {
                for (int i = 0; i < dtr.Rows.Count; i++)
                {
                    dtr.Rows[i]["ExperienceDetail"] = getExperienceDetail(Convert.ToInt32(dtr.Rows[i]["newempid"].ToString()), filternarec);
                }
            }
            //nomineedetail
            if (arl.Contains("NomineeDetail"))
            {
                for (int i = 0; i < dtr.Rows.Count; i++)
                {
                    dtr.Rows[i]["NomineeDetail"] = getNomineeDetail(Convert.ToInt32(dtr.Rows[i]["newempid"].ToString()), filternarec);
                }
            }
            //
            string rpthead = rptBLL.Message;
            if (filternarec == true)
            {
                rpthead += ", Incomplete Records";
            }
            //
            //rptheader
            string reportheader = "<table border='0' cellpadding='4' cellspacing='0' style='font-size:10pt;' align='center'>";
            reportheader += "<tr>";//line-1
            reportheader += "<td align='left'>";
            string logopath = System.Configuration.ConfigurationManager.AppSettings["baseurl"].ToString();
            logopath += "Images/prag-logo.png";
            reportheader += "<img src=" + logopath + " width='60%' height='55%'>";
            reportheader += "</td>";
            reportheader += "<td align='left'>";
            reportheader += "<span style='font-family:Verdana;font-size:14pt;color:black;font-weight:bold;'>PRAG GROUP: Employee Report</span>";
            reportheader += "</td>";
            reportheader += "</tr>";
            reportheader += "<tr>";//line-2
            reportheader += "<td colspan='2' align='center'>";
            reportheader += "<span style='font-family:Verdana;font-size:12pt;color:black;font-weight:bold;'>" + rpthead + "</span>";
            reportheader += "</td>";
            reportheader += "</tr>";
            reportheader += "</table>";//rptheader
            //rptmatter
            string reportmatter = "<table border='1' cellpadding='4' cellspacing='0' style='font-size:10pt;' align='center'>";
            reportmatter += "<tr>";//column headers
            reportmatter += "<td valign='top'><b>S.No.</b></td>";
            for (int i = 0; i < arl.Length; i++)
            {
                if (dtr.Columns.Contains(arl[i].ToString()))
                {
                    reportmatter += "<td valign='top'><b>" + arl[i].ToString() + "<br/></b></td>";
                }
            }
            bool addrec = false;
            int rcnt = 1;
            reportmatter += "</tr>";//rows
            if (filternarec == true)
            {
                for (int i = 0; i < dtr.Rows.Count; i++)
                {
                    addrec = false;
                    for (int x = 0; x < arl.Length; x++)
                    {
                        if (dtr.Rows[i][arl[x]].ToString().ToLower() == "na" || dtr.Rows[i][arl[x]].ToString().Length == 0)
                        {
                            addrec = true;
                            break;
                        }
                    }
                    if (addrec == true)
                    {
                        reportmatter += "<tr>";
                        reportmatter += "<td valign='top'>" + rcnt.ToString() + "</td>";//sno
                        for (int j = 0; j < arl.Length; j++)
                        {
                            if (dtr.Columns.Contains(arl[j].ToString()))
                            {
                                reportmatter += "<td valign='top'>" + dtr.Rows[i][arl[j]].ToString() + "</td>";
                            }
                        }
                        reportmatter += "</tr>";
                        rcnt += 1;
                    }
                }
            }
            else
            {
                for (int i = 0; i < dtr.Rows.Count; i++)
                {
                    reportmatter += "<tr>";
                    reportmatter += "<td valign='top'>" + (i + 1).ToString() + "</td>";//sno
                    for (int j = 0; j < arl.Length; j++)
                    {
                        if (dtr.Columns.Contains(arl[j].ToString()))
                        {
                            reportmatter += "<td valign='top'>" + dtr.Rows[i][arl[j]].ToString() + "</td>";
                        }
                    }
                    reportmatter += "</tr>";
                }
            }
            //totals
            //reportmatter += "<tr>";
            //reportmatter += "<td colspan='8' align='right' valign='top'><b>Total: " + mc.getINRCFormat(tlcredit) + ", TDS Amount: " + mc.getINRCFormat(tltds) + ", Net Payable: " + mc.getINRCFormat(netamt) + "</b></td>";
            //reportmatter += "</td>";
            //reportmatter += "</tr>";
            reportmatter += "</table>";//rptmatter
            //rptfooter
            string reportfooter = "<table border='0' cellpadding='4' cellspacing='0' style='font-size:8pt;' align='center'>";
            reportfooter += "<tr>";
            reportfooter += "<td align='left'>";
            reportfooter += "<span style='font-family:Verdana;color:black'>---End of Report---Run Date: " + mc.getDateTimeString(DateTime.Now) + " [User: " + objCookie.getUserName() + "]</span>";
            reportfooter += "</td>";
            reportfooter += "<td align='right'>";
            reportfooter += "<a href='javascript:window.print();'>Print</a>&nbsp;&nbsp<a href='javascript:window.close();'>Close</a>";
            reportfooter += "</td>";
            reportfooter += "</tr>";
            reportheader += "</table>";//rfooter
            return Content("<html><body style='font-family:verdana;font-size:10pt;'>" + reportheader + "<br/>" + reportmatter + "<br/>" + reportfooter + "</body></html>");
        }

        private string getFamilyDetail(int newempid, bool filternarec = false)
        {
            //[100088]/F3-SubRpt
            FamilyDetailBLL rptBLL = new FamilyDetailBLL();
            System.Data.DataTable dtr = new System.Data.DataTable();
            dtr = rptBLL.getObjectData(newempid).Tables[0];
            if (dtr.Rows.Count == 0)
            {
                return "<html><body style='font-family:verdana;font-size:10pt;'>No Family Detail Record Found</body></html>";
            }
            dtr.Columns.Add("BirthDateStr");
            for (int i = 0; i < dtr.Rows.Count; i++)
            {
                dtr.Rows[i]["BirthDateStr"] = mc.getStringByDate(Convert.ToDateTime(dtr.Rows[i]["BirthDate"].ToString()));
            }
            //rptmatter
            string reportmatter = "<table border='1' cellpadding='4' cellspacing='0' style='font-size:10pt;' align='left'>";
            reportmatter += "<tr>";
            reportmatter += "<td valign='top'><b>S.No.</b></td>";
            reportmatter += "<td valign='top'><b>MemberName</b></td>";
            reportmatter += "<td valign='top'><b>BirthDate</b></td>";
            reportmatter += "<td valign='top'><b>Age</b></td>";
            reportmatter += "<td valign='top'><b>Relation</b></td>";
            //
            bool addrec = false;
            int rcnt = 1;
            //
            reportmatter += "</tr>";
            if (filternarec == true)
            {
                for (int i = 0; i < dtr.Rows.Count; i++)
                {
                    addrec = false;
                    if 
                    (
                      dtr.Rows[i]["membername"].ToString().ToLower() == "na" ||
                      dtr.Rows[i]["membername"].ToString().Length == 0 ||
                      dtr.Rows[i]["birthdatestr"].ToString().ToLower() == "01/01/1900" ||
                      dtr.Rows[i]["relation"].ToString().ToLower() == "na" ||
                      dtr.Rows[i]["relation"].ToString().Length == 0
                    )
                    {
                      addrec = true;
                    }
                    if (addrec == true)
                    {
                        reportmatter += "<tr>";
                        reportmatter += "<td valign='top'>" + rcnt.ToString() + "</td>";//sno
                        reportmatter += "<td valign='top'>" + dtr.Rows[i]["membername"].ToString() + "</td>";
                        reportmatter += "<td valign='top'>" + dtr.Rows[i]["birthdatestr"].ToString() + "</td>";
                        reportmatter += "<td valign='top'>" + dtr.Rows[i]["age"].ToString() + "</td>";
                        reportmatter += "<td valign='top'>" + dtr.Rows[i]["relation"].ToString() + "</td>";
                        reportmatter += "</tr>";
                        rcnt += 1;
                    }
                }
            }
            else 
            {
                for (int i = 0; i < dtr.Rows.Count; i++)
                {
                    reportmatter += "<tr>";
                    reportmatter += "<td valign='top'>" + (i + 1).ToString() + "</td>";//sno
                    reportmatter += "<td valign='top'>" + dtr.Rows[i]["membername"].ToString() + "</td>";
                    reportmatter += "<td valign='top'>" + dtr.Rows[i]["birthdatestr"].ToString() + "</td>";
                    reportmatter += "<td valign='top'>" + dtr.Rows[i]["age"].ToString() + "</td>";
                    reportmatter += "<td valign='top'>" + dtr.Rows[i]["relation"].ToString() + "</td>";
                    reportmatter += "</tr>";
                }
            }
            //
            reportmatter += "</table>";//rptmatter
            string hstr = "<html><body style='font-family:verdana;font-size:10pt;'>" + reportmatter + "</body></html>";
            return hstr;
        }

        private string getQualificationDetail(int newempid, bool filternarec = false)
        {
            //[100088]/F3-SubRpt
            QualDetailBLL rptBLL = new QualDetailBLL();
            System.Data.DataTable dtr = new System.Data.DataTable();
            dtr = rptBLL.getObjectData(newempid).Tables[0];
            if (dtr.Rows.Count == 0)
            {
                return "<html><body style='font-family:verdana;font-size:10pt;'>No Qualification Detail Record Found</body></html>";
            }
            //rptmatter
            string reportmatter = "<table border='1' cellpadding='4' cellspacing='0' style='font-size:10pt;' align='left'>";
            reportmatter += "<tr>";
            reportmatter += "<td valign='top'><b>S.No.</b></td>";
            reportmatter += "<td valign='top'><b>Qualification</b></td>";
            reportmatter += "<td valign='top'><b>PassingYear</b></td>";
            reportmatter += "<td valign='top'><b>Institute</b></td>";
            reportmatter += "<td valign='top'><b>UnivBoard</b></td>";
            reportmatter += "<td valign='top'><b>DivPer</b></td>";
            //
            bool addrec = false;
            int rcnt = 1;
            //
            reportmatter += "</tr>";
            if (filternarec == true)
            {
                for (int i = 0; i < dtr.Rows.Count; i++)
                {
                    addrec = false;
                    if
                    (
                      dtr.Rows[i]["qualification"].ToString().ToLower() == "na" ||
                      dtr.Rows[i]["qualification"].ToString().Length == 0 ||
                      dtr.Rows[i]["passingyear"].ToString().ToLower() == "0" ||
                      dtr.Rows[i]["institute"].ToString().ToLower() == "na" ||
                      dtr.Rows[i]["institute"].ToString().Length == 0 ||
                      dtr.Rows[i]["univboard"].ToString().ToLower() == "na" ||
                      dtr.Rows[i]["univboard"].ToString().Length == 0 ||
                      dtr.Rows[i]["division"].ToString().ToLower() == "0"
                    )
                    {
                        addrec = true;
                    }
                    if (addrec == true)
                    {
                        reportmatter += "<tr>";
                        reportmatter += "<td valign='top'>" + rcnt.ToString() + "</td>";//sno
                        reportmatter += "<td valign='top'>" + dtr.Rows[i]["qualification"].ToString() + "</td>";
                        reportmatter += "<td valign='top'>" + dtr.Rows[i]["passingyear"].ToString() + "</td>";
                        reportmatter += "<td valign='top'>" + dtr.Rows[i]["institute"].ToString() + "</td>";
                        reportmatter += "<td valign='top'>" + dtr.Rows[i]["univboard"].ToString() + "</td>";
                        reportmatter += "<td valign='top'>" + dtr.Rows[i]["division"].ToString() + "</td>";
                        reportmatter += "</tr>";
                        rcnt += 1;
                    }
                }
            }
            else
            {
                for (int i = 0; i < dtr.Rows.Count; i++)
                {
                    reportmatter += "<tr>";
                    reportmatter += "<td valign='top'>" + (i + 1).ToString() + "</td>";//sno
                    reportmatter += "<td valign='top'>" + dtr.Rows[i]["qualification"].ToString() + "</td>";
                    reportmatter += "<td valign='top'>" + dtr.Rows[i]["passingyear"].ToString() + "</td>";
                    reportmatter += "<td valign='top'>" + dtr.Rows[i]["institute"].ToString() + "</td>";
                    reportmatter += "<td valign='top'>" + dtr.Rows[i]["univboard"].ToString() + "</td>";
                    reportmatter += "<td valign='top'>" + dtr.Rows[i]["division"].ToString() + "</td>";
                    reportmatter += "</tr>";
                }
            }
            //
            reportmatter += "</table>";//rptmatter
            string hstr = "<html><body style='font-family:verdana;font-size:10pt;'>" + reportmatter + "</body></html>";
            return hstr;
        }

        private string getExperienceDetail(int newempid, bool filternarec = false)
        {
            //[100088]/F3-SubRpt
            ExperienceDetailBLL rptBLL = new ExperienceDetailBLL();
            System.Data.DataTable dtr = new System.Data.DataTable();
            dtr = rptBLL.getObjectData(newempid).Tables[0];
            if (dtr.Rows.Count == 0)
            {
                return "<html><body style='font-family:verdana;font-size:10pt;'>No Experience Detail Record Found</body></html>";
            }
            dtr.Columns.Add("DateFromStr");
            dtr.Columns.Add("DateToStr");
            for (int i = 0; i < dtr.Rows.Count; i++)
            {
                dtr.Rows[i]["DateFromStr"] = mc.getStringByDate(Convert.ToDateTime(dtr.Rows[i]["DateFrom"].ToString()));
                dtr.Rows[i]["DateToStr"] = mc.getStringByDate(Convert.ToDateTime(dtr.Rows[i]["DateTo"].ToString()));
            }
            //rptmatter
            string reportmatter = "<table border='1' cellpadding='4' cellspacing='0' style='font-size:10pt;' align='left'>";
            reportmatter += "<tr>";
            reportmatter += "<td valign='top'><b>S.No.</b></td>";
            reportmatter += "<td valign='top'><b>FirmName</b></td>";
            reportmatter += "<td valign='top'><b>DateFrom</b></td>";
            reportmatter += "<td valign='top'><b>DateTo</b></td>";
            reportmatter += "<td valign='top'><b>Designation</b></td>";
            reportmatter += "<td valign='top'><b>JobDesc</b></td>";
            //
            bool addrec = false;
            int rcnt = 1;
            //
            reportmatter += "</tr>";
            if (filternarec == true)
            {
                for (int i = 0; i < dtr.Rows.Count; i++)
                {
                    addrec = false;
                    if
                    (
                      dtr.Rows[i]["firmname"].ToString().ToLower() == "na" ||
                      dtr.Rows[i]["firmname"].ToString().Length == 0 ||
                      dtr.Rows[i]["datefromstr"].ToString().ToLower() == "01/01/1900" ||
                      dtr.Rows[i]["datetostr"].ToString().ToLower() == "01/01/1900" ||
                      dtr.Rows[i]["designation"].ToString().ToLower() == "na" ||
                      dtr.Rows[i]["designation"].ToString().Length == 0 ||
                      dtr.Rows[i]["jobdesc"].ToString().ToLower() == "na" ||
                      dtr.Rows[i]["jobdesc"].ToString().Length == 0
                    )
                    {
                        addrec = true;
                    }
                    if (addrec == true)
                    {
                        reportmatter += "<tr>";
                        reportmatter += "<td valign='top'>" + rcnt.ToString() + "</td>";//sno
                        reportmatter += "<td valign='top'>" + dtr.Rows[i]["firmname"].ToString() + "</td>";
                        reportmatter += "<td valign='top'>" + dtr.Rows[i]["datefromstr"].ToString() + "</td>";
                        reportmatter += "<td valign='top'>" + dtr.Rows[i]["datetostr"].ToString() + "</td>";
                        reportmatter += "<td valign='top'>" + dtr.Rows[i]["designation"].ToString() + "</td>";
                        reportmatter += "<td valign='top'>" + dtr.Rows[i]["jobdesc"].ToString() + "</td>";
                        reportmatter += "</tr>";
                        rcnt += 1;
                    }
                }
            }
            else
            {
                for (int i = 0; i < dtr.Rows.Count; i++)
                {
                    reportmatter += "<tr>";
                    reportmatter += "<td valign='top'>" + (i + 1).ToString() + "</td>";//sno
                    reportmatter += "<td valign='top'>" + dtr.Rows[i]["firmname"].ToString() + "</td>";
                    reportmatter += "<td valign='top'>" + dtr.Rows[i]["datefromstr"].ToString() + "</td>";
                    reportmatter += "<td valign='top'>" + dtr.Rows[i]["datetostr"].ToString() + "</td>";
                    reportmatter += "<td valign='top'>" + dtr.Rows[i]["designation"].ToString() + "</td>";
                    reportmatter += "<td valign='top'>" + dtr.Rows[i]["jobdesc"].ToString() + "</td>";
                    reportmatter += "</tr>";
                }
            }
            //
            reportmatter += "</table>";//rptmatter
            string hstr = "<html><body style='font-family:verdana;font-size:10pt;'>" + reportmatter + "</body></html>";
            return hstr;
        }

        private string getNomineeDetail(int newempid, bool filternarec = false)
        {
            //[100088]/F3-SubRpt
            PFNomineeBLL rptBLL = new PFNomineeBLL();
            System.Data.DataTable dtr = new System.Data.DataTable();
            dtr = rptBLL.getObjectData(newempid).Tables[0];
            if (dtr.Rows.Count == 0)
            {
                return "<html><body style='font-family:verdana;font-size:10pt;'>No Nominee Detail Record Found</body></html>";
            }
            dtr.Columns.Add("BirthDateStr");
            for (int i = 0; i < dtr.Rows.Count; i++)
            {
                dtr.Rows[i]["BirthDateStr"] = mc.getStringByDate(Convert.ToDateTime(dtr.Rows[i]["BirthDate"].ToString()));
            }
            //rptmatter
            string reportmatter = "<table border='1' cellpadding='4' cellspacing='0' style='font-size:10pt;' align='left'>";
            reportmatter += "<tr>";
            reportmatter += "<td valign='top'><b>S.No.</b></td>";
            reportmatter += "<td valign='top'><b>MemberName</b></td>";
            reportmatter += "<td valign='top'><b>BirthDate</b></td>";
            reportmatter += "<td valign='top'><b>Age</b></td>";
            reportmatter += "<td valign='top'><b>Relation</b></td>";
            reportmatter += "<td valign='top'><b>SharePercent</b></td>";
            reportmatter += "<td valign='top'><b>MAddress</b></td>";
            reportmatter += "<td valign='top'><b>GuardianDetail</b></td>";
            reportmatter += "<td valign='top'><b>NomineeForName</b></td>";
            //
            bool addrec = false;
            int rcnt = 1;
            //
            reportmatter += "</tr>";
            if (filternarec == true)
            {
                for (int i = 0; i < dtr.Rows.Count; i++)
                {
                    addrec = false;
                    if
                    (
                      dtr.Rows[i]["membername"].ToString().ToLower() == "na" ||
                      dtr.Rows[i]["membername"].ToString().Length == 0 ||
                      dtr.Rows[i]["birthdatestr"].ToString().ToLower() == "01/01/1900" ||
                      dtr.Rows[i]["relation"].ToString().ToLower() == "na" ||
                      dtr.Rows[i]["relation"].ToString().Length == 0 ||
                      dtr.Rows[i]["SharePercent"].ToString().ToLower() == "0" ||
                      dtr.Rows[i]["MAddress"].ToString().ToLower() == "na" ||
                      dtr.Rows[i]["MAddress"].ToString().Length == 0 ||
                      dtr.Rows[i]["GuardianDetail"].ToString().ToLower() == "na" ||
                      dtr.Rows[i]["GuardianDetail"].ToString().Length == 0
                    )
                    {
                        addrec = true;
                    }
                    if (addrec == true)
                    {
                        reportmatter += "<tr>";
                        reportmatter += "<td valign='top'>" + rcnt.ToString() + "</td>";//sno
                        reportmatter += "<td valign='top'>" + dtr.Rows[i]["membername"].ToString() + "</td>";
                        reportmatter += "<td valign='top'>" + dtr.Rows[i]["birthdatestr"].ToString() + "</td>";
                        reportmatter += "<td valign='top'>" + dtr.Rows[i]["age"].ToString() + "</td>";
                        reportmatter += "<td valign='top'>" + dtr.Rows[i]["relation"].ToString() + "</td>";
                        reportmatter += "<td valign='top'>" + dtr.Rows[i]["SharePercent"].ToString() + "</td>";
                        reportmatter += "<td valign='top'>" + dtr.Rows[i]["MAddress"].ToString() + "</td>";
                        reportmatter += "<td valign='top'>" + dtr.Rows[i]["GuardianDetail"].ToString() + "</td>";
                        reportmatter += "<td valign='top'>" + dtr.Rows[i]["NomineeForName"].ToString() + "</td>";
                        reportmatter += "</tr>";
                        rcnt += 1;
                    }
                }
            }
            else
            {
                for (int i = 0; i < dtr.Rows.Count; i++)
                {
                    reportmatter += "<tr>";
                    reportmatter += "<td valign='top'>" + (i + 1).ToString() + "</td>";//sno
                    reportmatter += "<td valign='top'>" + dtr.Rows[i]["membername"].ToString() + "</td>";
                    reportmatter += "<td valign='top'>" + dtr.Rows[i]["birthdatestr"].ToString() + "</td>";
                    reportmatter += "<td valign='top'>" + dtr.Rows[i]["age"].ToString() + "</td>";
                    reportmatter += "<td valign='top'>" + dtr.Rows[i]["relation"].ToString() + "</td>";
                    reportmatter += "<td valign='top'>" + dtr.Rows[i]["SharePercent"].ToString() + "</td>";
                    reportmatter += "<td valign='top'>" + dtr.Rows[i]["MAddress"].ToString() + "</td>";
                    reportmatter += "<td valign='top'>" + dtr.Rows[i]["GuardianDetail"].ToString() + "</td>";
                    reportmatter += "<td valign='top'>" + dtr.Rows[i]["NomineeForName"].ToString() + "</td>";
                    reportmatter += "</tr>";
                }
            }
            //
            reportmatter += "</table>";//rptmatter
            string hstr = "<html><body style='font-family:verdana;font-size:10pt;'>" + reportmatter + "</body></html>";
            return hstr;
        }

        #endregion

        #region employee birthday alert

        public ActionResult BirthdayAlertView()
        {
            if (objCookie.checkSessionState() == false) { return RedirectToAction("LoginUser", "Login"); };
            setViewData();
            rptOptionMdl rptOption = new rptOptionMdl();
            //ViewBag.GradeList = new SelectList(mc.getGradeList(), "Value", "Text");
            ViewBag.ReportFormatList = new SelectList(mc.getReportFormatList(), "Value", "Text");
            ViewBag.MonthList = new SelectList(mc.getMonthList(), "Value", "Text");
            ViewBag.ReportFormatList = new SelectList(mc.getReportFormatList(), "Value", "Text");
            rptOption.VNoFrom = DateTime.Now.Month;
            rptOption.VNoTo = DateTime.Now.Month;
            return View(rptOption);
        }

        //[HttpPost]
        public ActionResult EmployeeBirthdayReport(rptOptionMdl rptOption = null)
        {
            //[100089]
            if (objCookie.checkSessionState() == false) { return RedirectToAction("LoginUser", "Login"); };
            setViewData();
            //if called directly
            if (rptOption.VNoFrom == 0 && rptOption.VNoTo == 0)
            {
                rptOption.VNoFrom = DateTime.Now.Month;
                rptOption.VNoTo = DateTime.Now.Month;
                rptOption.Grade = "o";
                rptOption.ReportFormat = "pdf";
            }
            //
            bool p1 = mc.getPermission(Entry.Employee_Report, permissionType.Add);
            bool p2 = mc.getPermission(Entry.BirthdayAnnivAlert, permissionType.Add);
            bool viewper = false;
            if (p1 == true || p2 == true)
            {
                viewper = true;
            }
            if (viewper == false)//no permission
            {
                return Content("<a href='#' onclick='javascript:window.close();'><h1>Permission Denied!</h1></a>");
            }
            p1 = mc.getPermission(Entry.Employee_Report, permissionType.Edit);
            p2 = mc.getPermission(Entry.BirthdayAnnivAlert, permissionType.Edit);
            bool downloadper = false;
            if (p1 == true || p2 == true)
            {
                downloadper = true;
            }
            //
            if (downloadper == false) { rptOption.ReportFormat = "pdf"; };
            Session["xsid"] = objCookie.getUserId();
            string methodname = "getEmployeeBirthdayFile";
            if (rptOption.ReportFormat == "Excel") { methodname = "getEmployeeBirthdayFileCSV"; };
            if (viewper == true && downloadper == false)//view only
            {
                string reporturl = "EmployeeFormsReport/" + methodname;
                string reportpms = "monthfrom=" + rptOption.VNoFrom + "";
                reportpms += "monthto = " + rptOption.VNoTo + "";
                reportpms += "grade = " + rptOption.Grade + "";
                return RedirectToAction("IndexIFrameRpt", "Home", new { reporturl = reporturl, reportpms = reportpms });
            }
            //full access with download (no escalation)
            return RedirectToAction(methodname, new { monthfrom = rptOption.VNoFrom, monthto = rptOption.VNoTo, grade = rptOption.Grade });
        }

        public ActionResult getEmployeeBirthdayFile(int monthfrom, int monthto, string grade = "0")
        {
            //[100089]
            if (mc.isValidToDisplayReport() == false)
            {
                return File(Server.MapPath("~/App_Data/EmpDocs/") + "/blank/Permission.png", "png");
            }
            //
            CrystalDecisions.CrystalReports.Engine.ReportDocument rptDoc = new CrystalDecisions.CrystalReports.Engine.ReportDocument();
            //CrystalDecisions.CrystalReports.Engine.ReportDocument rptDocSub = new CrystalDecisions.CrystalReports.Engine.ReportDocument();
            rptDoc.Load(System.IO.Path.Combine(Server.MapPath("~/Reports"), "EmployeeBirthdayRpt.rpt"));
            //rptDocSub.Load(System.IO.Path.Combine(Server.MapPath("~/Reports"), "OrderFooter.rpt"));
            setLoginInfo(rptDoc);
            //setLoginInfo(rptDocSub);
            CrystalDecisions.CrystalReports.Engine.TextObject txtRptTitle = (CrystalDecisions.CrystalReports.Engine.TextObject)rptDoc.ReportDefinition.Sections["Section1"].ReportObjects["txtRptTitle"];
            string mfrom = mc.getNameByKey(mc.getMonths(), "monthid", monthfrom.ToString(), "monthname");
            string mto = mc.getNameByKey(mc.getMonths(), "monthid", monthto.ToString(), "monthname");
            if (monthfrom == monthto)
            {
                txtRptTitle.Text = "List of Employees for Birthday in " + mfrom;
            }
            else
            {
                txtRptTitle.Text = "List of Employees for Birthday from " + mfrom + " To " + mto;
            }
            string gradename = "All";
            if (grade != "0")
            {
                gradename = mc.getNameByKey(mc.getGrades(), "grade", grade, "gradename");
            }
            txtRptTitle.Text += ", Grade: " + gradename;
            //rptDoc.Subreports[0].SetDataSource(ds);
            //dbp parameters for --usp_get_employee_retirement_report
            rptDoc.SetParameterValue("@monthfrom", monthfrom);
            rptDoc.SetParameterValue("@monthto", monthto);
            rptDoc.SetParameterValue("@grade", grade);
            //additional parameters --defined in crpt with @name/static
            //rptDoc.SetParameterValue("@KK", "My Parameter");
            //
            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();
            //rd.RecordSelectionFormula = "";
            System.IO.Stream stream = null;
            try
            {
                stream = rptDoc.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
            }
            catch (Exception ex)
            {
                string st = ex.Message;
            }
            finally
            {
                rptDoc.Close();
                //rptDocSub.Close();
            }
            //add these lines to download
            //stream.Seek(0, System.IO.SeekOrigin.Begin);
            //return File(stream, "application/pdf", "ReportName.pdf");
            return File(stream, "application/pdf");
        }

        public ActionResult getEmployeeBirthdayFileCSV(int monthfrom, int monthto, string grade = "0")
        {
            //[100089] --Direct to Excel
            if (mc.isValidToDisplayReport() == false)
            {
                return File(Server.MapPath("~/App_Data/EmpDocs/") + "/blank/Permission.png", "png");
            }
            //
            string rptname = "Employee Birthday Report";
            EmployeeBLL objBLL = new EmployeeBLL();
            DataSet ds = new DataSet();
            ds = objBLL.getEmployeeBirthdayData(monthfrom, monthto, grade);
            ds.Tables[0].Columns.Remove("BirthDate");
            //
            var grid = new System.Web.UI.WebControls.GridView();
            grid.DataSource = ds.Tables[0];
            grid.DataBind();
            //
            Response.ClearContent();
            Response.Buffer = true;
            Response.AddHeader("content-disposition", "attachment; filename=" + rptname + ".xls");
            Response.ContentType = "application/ms-excel";
            //
            Response.Charset = "";
            //
            System.IO.StringWriter sw = new System.IO.StringWriter();
            System.Web.UI.HtmlTextWriter htw = new System.Web.UI.HtmlTextWriter(sw);
            //
            string mfrom = mc.getNameByKey(mc.getMonths(), "monthid", monthfrom.ToString(), "monthname");
            string mto = mc.getNameByKey(mc.getMonths(), "monthid", monthto.ToString(), "monthname");
            string rptheader = "";
            if (monthfrom == monthto)
            {
                rptheader = "List of Employees for Birthday in " + mfrom;
            }
            else
            {
                rptheader = "List of Employees for Birthday from " + mfrom + " To " + mto;
            }
            string gradename = "All";
            if (grade != "0")
            {
                gradename = mc.getNameByKey(mc.getGrades(), "grade", grade, "gradename");
            }
            rptheader += ", Grade: " + gradename;
            //
            //company name
            htw.AddAttribute("CustomAttribute", "CustomAttributeValue");
            htw.AddStyleAttribute(System.Web.UI.HtmlTextWriterStyle.FontSize, "16pt");
            htw.AddStyleAttribute(System.Web.UI.HtmlTextWriterStyle.FontWeight, "bold");
            htw.AddStyleAttribute(System.Web.UI.HtmlTextWriterStyle.TextAlign, "center");
            htw.AddStyleAttribute("Customstyle", "CustomStyleValue");
            htw.RenderBeginTag(System.Web.UI.HtmlTextWriterTag.Span);
            htw.WriteLine("PRAG GROUP OF INDUSTRIES");
            htw.WriteBreak();
            //report header
            htw.AddStyleAttribute(System.Web.UI.HtmlTextWriterStyle.FontSize, "14pt");
            htw.AddStyleAttribute(System.Web.UI.HtmlTextWriterStyle.FontWeight, "bold");
            htw.AddStyleAttribute(System.Web.UI.HtmlTextWriterStyle.TextAlign, "center");
            htw.AddStyleAttribute("Customstyle", "CustomStyleValue");
            htw.RenderBeginTag(System.Web.UI.HtmlTextWriterTag.Span);
            htw.WriteLine(rptheader);
            htw.WriteBreak();
            //
            grid.RenderControl(htw);
            //
            htw.AddStyleAttribute(System.Web.UI.HtmlTextWriterStyle.FontSize, "10pt");
            htw.AddStyleAttribute(System.Web.UI.HtmlTextWriterStyle.FontWeight, "regular");
            htw.AddStyleAttribute("Customstyle", "CustomStyleValue");
            htw.RenderBeginTag(System.Web.UI.HtmlTextWriterTag.Span);
            htw.WriteLine("---End of Report---[100089], Sorted on: Birth Date, Run Date: " + mc.getDateTimeString(DateTime.Now) + ".");
            htw.WriteBreak();
            //
            Response.Output.Write(sw.ToString());
            Response.Flush();
            Response.End();
            //
            return View();
            //
        }

        #endregion

        #region employee anniversary alert

        public ActionResult AnniversaryAlertView()
        {
            if (objCookie.checkSessionState() == false) { return RedirectToAction("LoginUser", "Login"); };
            setViewData();
            rptOptionMdl rptOption = new rptOptionMdl();
            //ViewBag.GradeList = new SelectList(mc.getGradeList(), "Value", "Text");
            ViewBag.ReportFormatList = new SelectList(mc.getReportFormatList(), "Value", "Text");
            ViewBag.MonthList = new SelectList(mc.getMonthList(), "Value", "Text");
            ViewBag.ReportFormatList = new SelectList(mc.getReportFormatList(), "Value", "Text");
            rptOption.VNoFrom = DateTime.Now.Month;
            rptOption.VNoTo = DateTime.Now.Month;
            return View(rptOption);
        }

        //[HttpPost]
        public ActionResult EmployeeAnniversaryReport(rptOptionMdl rptOption = null)
        {
            //[100090]
            if (objCookie.checkSessionState() == false) { return RedirectToAction("LoginUser", "Login"); };
            setViewData();
            //if called directly
            if (rptOption.VNoFrom == 0 && rptOption.VNoTo == 0)
            {
                rptOption.VNoFrom = DateTime.Now.Month;
                rptOption.VNoTo = DateTime.Now.Month;
                rptOption.Grade = "o";
                rptOption.ReportFormat = "pdf";
            }
            //
            bool p1 = mc.getPermission(Entry.Employee_Report, permissionType.Add);
            bool p2 = mc.getPermission(Entry.BirthdayAnnivAlert, permissionType.Add);
            bool viewper = false;
            if (p1 == true || p2 == true)
            {
                viewper = true;
            }
            if (viewper == false)//no permission
            {
                return Content("<a href='#' onclick='javascript:window.close();'><h1>Permission Denied!</h1></a>");
            }
            p1 = mc.getPermission(Entry.Employee_Report, permissionType.Edit);
            p2 = mc.getPermission(Entry.BirthdayAnnivAlert, permissionType.Edit);
            bool downloadper = false;
            if (p1 == true || p2 == true)
            {
                downloadper = true;
            }
            //
            if (downloadper == false) { rptOption.ReportFormat = "pdf"; };
            Session["xsid"] = objCookie.getUserId();
            string methodname = "getEmployeeAnniversaryFile";
            if (rptOption.ReportFormat == "Excel") { methodname = "getEmployeeAnniversaryFileCSV"; };
            if (viewper == true && downloadper == false)//view only
            {
                string reporturl = "EmployeeFormsReport/" + methodname;
                string reportpms = "monthfrom=" + rptOption.VNoFrom + "";
                reportpms += "monthto = " + rptOption.VNoTo + "";
                reportpms += "grade = " + rptOption.Grade + "";
                return RedirectToAction("IndexIFrameRpt", "Home", new { reporturl = reporturl, reportpms = reportpms });
            }
            //full access with download (no escalation)
            return RedirectToAction(methodname, new { monthfrom = rptOption.VNoFrom, monthto = rptOption.VNoTo, grade = rptOption.Grade });
        }

        public ActionResult getEmployeeAnniversaryFile(int monthfrom, int monthto, string grade = "0")
        {
            //[100090]
            if (mc.isValidToDisplayReport() == false)
            {
                return File(Server.MapPath("~/App_Data/EmpDocs/") + "/blank/Permission.png", "png");
            }
            //
            CrystalDecisions.CrystalReports.Engine.ReportDocument rptDoc = new CrystalDecisions.CrystalReports.Engine.ReportDocument();
            //CrystalDecisions.CrystalReports.Engine.ReportDocument rptDocSub = new CrystalDecisions.CrystalReports.Engine.ReportDocument();
            rptDoc.Load(System.IO.Path.Combine(Server.MapPath("~/Reports"), "EmployeeAnniversaryRpt.rpt"));
            //rptDocSub.Load(System.IO.Path.Combine(Server.MapPath("~/Reports"), "OrderFooter.rpt"));
            setLoginInfo(rptDoc);
            //setLoginInfo(rptDocSub);
            CrystalDecisions.CrystalReports.Engine.TextObject txtRptTitle = (CrystalDecisions.CrystalReports.Engine.TextObject)rptDoc.ReportDefinition.Sections["Section1"].ReportObjects["txtRptTitle"];
            string mfrom = mc.getNameByKey(mc.getMonths(), "monthid", monthfrom.ToString(), "monthname");
            string mto = mc.getNameByKey(mc.getMonths(), "monthid", monthto.ToString(), "monthname");
            if (monthfrom == monthto)
            {
                txtRptTitle.Text = "List of Employees for Anniversary in " + mfrom;
            }
            else
            {
                txtRptTitle.Text = "List of Employees for Anniversary from " + mfrom + " To " + mto;
            }
            string gradename = "All";
            if (grade != "0")
            {
                gradename = mc.getNameByKey(mc.getGrades(), "grade", grade, "gradename");
            }
            txtRptTitle.Text += ", Grade: " + gradename;
            //rptDoc.Subreports[0].SetDataSource(ds);
            //dbp parameters for --usp_get_employee_retirement_report
            rptDoc.SetParameterValue("@monthfrom", monthfrom);
            rptDoc.SetParameterValue("@monthto", monthto);
            rptDoc.SetParameterValue("@grade", grade);
            //additional parameters --defined in crpt with @name/static
            //rptDoc.SetParameterValue("@KK", "My Parameter");
            //
            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();
            //rd.RecordSelectionFormula = "";
            System.IO.Stream stream = null;
            try
            {
                stream = rptDoc.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
            }
            catch (Exception ex)
            {
                string st = ex.Message;
            }
            finally
            {
                rptDoc.Close();
                //rptDocSub.Close();
            }
            //add these lines to download
            //stream.Seek(0, System.IO.SeekOrigin.Begin);
            //return File(stream, "application/pdf", "ReportName.pdf");
            return File(stream, "application/pdf");
        }

        public ActionResult getEmployeeAnniversaryFileCSV(int monthfrom, int monthto, string grade = "0")
        {
            //[100090] --Direct to Excel
            if (mc.isValidToDisplayReport() == false)
            {
                return File(Server.MapPath("~/App_Data/EmpDocs/") + "/blank/Permission.png", "png");
            }
            //
            string rptname = "Employee Anniversary Report";
            EmployeeBLL objBLL = new EmployeeBLL();
            DataSet ds = new DataSet();
            ds = objBLL.getEmployeeAnniversaryData(monthfrom, monthto, grade);
            ds.Tables[0].Columns.Remove("AnnivDate");
            //
            var grid = new System.Web.UI.WebControls.GridView();
            grid.DataSource = ds.Tables[0];
            grid.DataBind();
            //
            Response.ClearContent();
            Response.Buffer = true;
            Response.AddHeader("content-disposition", "attachment; filename=" + rptname + ".xls");
            Response.ContentType = "application/ms-excel";
            //
            Response.Charset = "";
            //
            System.IO.StringWriter sw = new System.IO.StringWriter();
            System.Web.UI.HtmlTextWriter htw = new System.Web.UI.HtmlTextWriter(sw);
            //
            string mfrom = mc.getNameByKey(mc.getMonths(), "monthid", monthfrom.ToString(), "monthname");
            string mto = mc.getNameByKey(mc.getMonths(), "monthid", monthto.ToString(), "monthname");
            string rptheader = "";
            if (monthfrom == monthto)
            {
                rptheader = "List of Employees for Anniversary in " + mfrom;
            }
            else
            {
                rptheader = "List of Employees for Anniversary from " + mfrom + " To " + mto;
            }
            string gradename = "All";
            if (grade != "0")
            {
                gradename = mc.getNameByKey(mc.getGrades(), "grade", grade, "gradename");
            }
            rptheader += ", Grade: " + gradename;
            //
            //company name
            htw.AddAttribute("CustomAttribute", "CustomAttributeValue");
            htw.AddStyleAttribute(System.Web.UI.HtmlTextWriterStyle.FontSize, "16pt");
            htw.AddStyleAttribute(System.Web.UI.HtmlTextWriterStyle.FontWeight, "bold");
            htw.AddStyleAttribute(System.Web.UI.HtmlTextWriterStyle.TextAlign, "center");
            htw.AddStyleAttribute("Customstyle", "CustomStyleValue");
            htw.RenderBeginTag(System.Web.UI.HtmlTextWriterTag.Span);
            htw.WriteLine("PRAG GROUP OF INDUSTRIES");
            htw.WriteBreak();
            //report header
            htw.AddStyleAttribute(System.Web.UI.HtmlTextWriterStyle.FontSize, "14pt");
            htw.AddStyleAttribute(System.Web.UI.HtmlTextWriterStyle.FontWeight, "bold");
            htw.AddStyleAttribute(System.Web.UI.HtmlTextWriterStyle.TextAlign, "center");
            htw.AddStyleAttribute("Customstyle", "CustomStyleValue");
            htw.RenderBeginTag(System.Web.UI.HtmlTextWriterTag.Span);
            htw.WriteLine(rptheader);
            htw.WriteBreak();
            //
            grid.RenderControl(htw);
            //
            htw.AddStyleAttribute(System.Web.UI.HtmlTextWriterStyle.FontSize, "10pt");
            htw.AddStyleAttribute(System.Web.UI.HtmlTextWriterStyle.FontWeight, "regular");
            htw.AddStyleAttribute("Customstyle", "CustomStyleValue");
            htw.RenderBeginTag(System.Web.UI.HtmlTextWriterTag.Span);
            htw.WriteLine("---End of Report---[100090], Sorted on: Anniversary Date, Run Date: " + mc.getDateTimeString(DateTime.Now) + ".");
            htw.WriteBreak();
            //
            Response.Output.Write(sw.ToString());
            Response.Flush();
            Response.End();
            //
            return View();
            //
        }

        #endregion

        #region employee retirement alert

        public ActionResult RetirementAlertView()
        {
            if (objCookie.checkSessionState() == false) { return RedirectToAction("LoginUser", "Login"); };
            setViewData();
            rptOptionMdl rptOption = new rptOptionMdl();
            ViewBag.GradeList = new SelectList(mc.getGradeList(), "Value", "Text");
            ViewBag.ReportFormatList = new SelectList(mc.getReportFormatList(), "Value", "Text");
            rptOption.DateFrom = DateTime.Now;
            rptOption.DateTo = DateTime.Now.AddYears(1);
            return View(rptOption);
        }

        //[HttpPost]
        public ActionResult EmployeeRetirementReport(rptOptionMdl rptOption = null)
        {
            //[100091]
            if (objCookie.checkSessionState() == false) { return RedirectToAction("LoginUser", "Login"); };
            setViewData();
            //if called directly
            if (rptOption.DateFrom.Day == 1 && rptOption.DateFrom.Month == 1 && rptOption.DateFrom.Year == 1)
            {
                rptOption.DateFrom = DateTime.Now;
                rptOption.DateTo = DateTime.Now.AddYears(1);
                rptOption.Grade = "0";
            }
            bool viewper = mc.getPermission(Entry.Employee_Report, permissionType.Add);
            if (viewper == false)//no permission
            {
                return Content("<a href='#' onclick='javascript:window.close();'><h1>Permission Denied!</h1></a>");
            }
            bool downloadper = mc.getPermission(Entry.Employee_Report, permissionType.Edit);
            Session["xsid"] = objCookie.getUserId();
            if (viewper == true && downloadper == false)//view only
            {
                string reporturl = "EmployeeFormsReport/getEmployeeRetirementFile";
                string reportpms = "dtfrom=" + mc.getStringByDateForReport(rptOption.DateFrom) + "";
                reportpms += "dtto = " + mc.getStringByDateForReport(rptOption.DateTo) + "";
                reportpms += "grade = " + rptOption.Grade + "";
                return RedirectToAction("IndexIFrameRpt", "Home", new { reporturl = reporturl, reportpms = reportpms });
            }
            //full access with download (no escalation)
            return RedirectToAction("getEmployeeRetirementFile", new { dtfrom = rptOption.DateFrom, dtto = rptOption.DateTo, grade = rptOption.Grade });
        }

        public ActionResult getEmployeeRetirementFile(DateTime dtfrom, DateTime dtto, string grade = "0")
        {
            //[100091]
            if (mc.isValidToDisplayReport() == false)
            {
                return File(Server.MapPath("~/App_Data/EmpDocs/") + "/blank/Permission.png", "png");
            }
            //
            CrystalDecisions.CrystalReports.Engine.ReportDocument rptDoc = new CrystalDecisions.CrystalReports.Engine.ReportDocument();
            //CrystalDecisions.CrystalReports.Engine.ReportDocument rptDocSub = new CrystalDecisions.CrystalReports.Engine.ReportDocument();
            rptDoc.Load(System.IO.Path.Combine(Server.MapPath("~/Reports"), "EmployeeRetirementRpt.rpt"));
            //rptDocSub.Load(System.IO.Path.Combine(Server.MapPath("~/Reports"), "OrderFooter.rpt"));
            setLoginInfo(rptDoc);
            //setLoginInfo(rptDocSub);
            CrystalDecisions.CrystalReports.Engine.TextObject txtRptTitle = (CrystalDecisions.CrystalReports.Engine.TextObject)rptDoc.ReportDefinition.Sections["Section1"].ReportObjects["txtRptTitle"];
            string mfrom = mc.getNameByKey(mc.getMonths(), "monthid", dtfrom.Month.ToString(), "monthname");
            string mto = mc.getNameByKey(mc.getMonths(), "monthid", dtto.Month.ToString(), "monthname");
            txtRptTitle.Text = "List of Employees for Retirement between " + dtfrom.Day + " " + mfrom + " To " + dtto.Day + " " + mto;
            string gradename = "All";
            if (grade != "0")
            {
                gradename = mc.getNameByKey(mc.getGrades(), "grade", grade, "gradename");
            }
            txtRptTitle.Text += ", Grade: " + gradename;
            //rptDoc.Subreports[0].SetDataSource(ds);
            //dbp parameters for --usp_get_employee_retirement_report
            rptDoc.SetParameterValue("@dtfrom", dtfrom);
            rptDoc.SetParameterValue("@dtto", dtto);
            rptDoc.SetParameterValue("@grade", grade);
            //additional parameters --defined in crpt with @name/static
            //rptDoc.SetParameterValue("@KK", "My Parameter");
            //
            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();
            //rd.RecordSelectionFormula = "";
            System.IO.Stream stream = null;
            try
            {
                stream = rptDoc.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
            }
            catch (Exception ex)
            {
                string st = ex.Message;
            }
            finally
            {
                rptDoc.Close();
                //rptDocSub.Close();
            }
            //add these lines to download
            //stream.Seek(0, System.IO.SeekOrigin.Begin);
            //return File(stream, "application/pdf", "ReportName.pdf");
            return File(stream, "application/pdf");
        }

        #endregion

        #region employee strength alert

        [HttpPost]
        public ActionResult EmployeeStengthReport(rptOptionMdl rptOption)
        {
            //[100092]
            if (objCookie.checkSessionState() == false) { return RedirectToAction("LoginUser", "Login"); };
            setViewData();
            bool viewper = mc.getPermission(Entry.Employee_Report, permissionType.Add);
            if (viewper == false)//no permission
            {
                return Content("<a href='#' onclick='javascript:window.close();'><h1>Permission Denied!</h1></a>");
            }
            bool downloadper = mc.getPermission(Entry.Employee_Report, permissionType.Edit);
            Session["xsid"] = objCookie.getUserId();
            if (viewper == true && downloadper == false)//view only
            {
                string reporturl = "EmployeeFormsReport/getEmployeeStrengthFile";
                //string reportpms = "newempid=" + rptOption.NewEmpId + "";
                string reportpms = "newempid=0";
                return RedirectToAction("IndexIFrameRpt", "Home", new { reporturl = reporturl, reportpms = reportpms });
            }
            //full access with download (no escalation)
            return RedirectToAction("getEmployeeStrengthFile", new { newempid = 0 });
        }

        public ActionResult getEmployeeStrengthFile(int newempid = 0)
        {
            //[100092]
            if (mc.isValidToDisplayReport() == false)
            {
                return File(Server.MapPath("~/App_Data/EmpDocs/") + "/blank/Permission.png", "png");
            }
            //
            CrystalDecisions.CrystalReports.Engine.ReportDocument rptDoc = new CrystalDecisions.CrystalReports.Engine.ReportDocument();
            CrystalDecisions.CrystalReports.Engine.ReportDocument rptDocSub = new CrystalDecisions.CrystalReports.Engine.ReportDocument();
            rptDoc.Load(System.IO.Path.Combine(Server.MapPath("~/Reports/EmployeeRPT/"), "EmployeeStrengthRpt.rpt"));
            rptDocSub.Load(System.IO.Path.Combine(Server.MapPath("~/Reports/EmployeeRPT/"), "EmployeeStrengthAgencyRpt.rpt"));
            setLoginInfo(rptDoc);
            //setLoginInfo(rptDocSub);
            //CrystalDecisions.CrystalReports.Engine.TextObject txtrpthead = (CrystalDecisions.CrystalReports.Engine.TextObject)rptDoc.ReportDefinition.Sections["Section1"].ReportObjects["txtrpthead"];
            //rptDoc.Subreports[0].SetDataSource(ds);
            //usp_employee_strength_report, usp_agencywise_employee_strength
            //rptDoc.SetParameterValue("@newempid", newempid);
            //additional parameters --defined in crpt with @name/static
            //rptDoc.SetParameterValue("@KK", "My Parameter");
            //
            Response.Buffer = false;
            Response.ClearContent();
            Response.ClearHeaders();
            //rd.RecordSelectionFormula = "";
            System.IO.Stream stream = null;
            try
            {
                stream = rptDoc.ExportToStream(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat);
            }
            catch (Exception ex)
            {
                string st = ex.Message;
            }
            finally
            {
                rptDoc.Close();
                //rptDocSub.Close();
            }
            //add these lines to download
            //stream.Seek(0, System.IO.SeekOrigin.Begin);
            //return File(stream, "application/pdf", "ReportName.pdf");
            return File(stream, "application/pdf");
        }

        #endregion

        #region exportfile

        public ActionResult ExportToExcel(string rptname, DataTable data)
        {
            var grid = new System.Web.UI.WebControls.GridView();
            grid.DataSource = data;
            grid.DataBind();
            //
            Response.ClearContent();
            Response.Buffer = true;
            Response.AddHeader("content-disposition", "attachment; filename="+rptname+".xls");
            Response.ContentType = "application/ms-excel";
            //
            Response.Charset = "";
            //
            System.IO.StringWriter sw = new System.IO.StringWriter();
            System.Web.UI.HtmlTextWriter htw = new System.Web.UI.HtmlTextWriter(sw);
            //
            //add report name/title/filter-information before grid 
            htw.WriteLine("Company Information");
            htw.WriteBreak();
            htw.WriteLine("Report Name");
            htw.WriteBreak();
            htw.WriteLine("Report Header Information");
            htw.WriteBreak();
            //
            grid.RenderControl(htw);
            //
            Response.Output.Write(sw.ToString());
            Response.Flush();
            Response.End();
            //
            return View();
            //
        }

        #endregion

        private void setLoginInfo(CrystalDecisions.CrystalReports.Engine.ReportDocument rptDoc)
        {
            DataTable lginfo = mc.getCrptLoginInfo();
            CrystalDecisions.Shared.TableLogOnInfos crtableLogoninfos = new CrystalDecisions.Shared.TableLogOnInfos();
            CrystalDecisions.Shared.TableLogOnInfo crtableLogoninfo = new CrystalDecisions.Shared.TableLogOnInfo();
            CrystalDecisions.Shared.ConnectionInfo crConnectionInfo = new CrystalDecisions.Shared.ConnectionInfo();
            crConnectionInfo.ServerName = lginfo.Rows[0]["svrname"].ToString();
            crConnectionInfo.DatabaseName = lginfo.Rows[0]["dbname"].ToString();
            crConnectionInfo.UserID = lginfo.Rows[0]["userid"].ToString();
            crConnectionInfo.Password = lginfo.Rows[0]["passw"].ToString();
            CrystalDecisions.CrystalReports.Engine.Tables CrTables = rptDoc.Database.Tables;
            foreach (CrystalDecisions.CrystalReports.Engine.Table CrTable in CrTables)
            {
                crtableLogoninfo = CrTable.LogOnInfo;
                crtableLogoninfo.ConnectionInfo = crConnectionInfo;
                CrTable.ApplyLogOnInfo(crtableLogoninfo);
            }
        }

    }
}
